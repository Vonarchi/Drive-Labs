"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sindresorhus+merge-streams@4.0.0";
exports.ids = ["vendor-chunks/@sindresorhus+merge-streams@4.0.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@sindresorhus+merge-streams@4.0.0/node_modules/@sindresorhus/merge-streams/index.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sindresorhus+merge-streams@4.0.0/node_modules/@sindresorhus/merge-streams/index.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ mergeStreams)\n/* harmony export */ });\n/* harmony import */ var node_events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:events */ \"node:events\");\n/* harmony import */ var node_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:stream */ \"node:stream\");\n/* harmony import */ var node_stream_promises__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! node:stream/promises */ \"node:stream/promises\");\n\n\n\nfunction mergeStreams(streams) {\n    if (!Array.isArray(streams)) {\n        throw new TypeError(`Expected an array, got \\`${typeof streams}\\`.`);\n    }\n    for (const stream of streams){\n        validateStream(stream);\n    }\n    const objectMode = streams.some(({ readableObjectMode })=>readableObjectMode);\n    const highWaterMark = getHighWaterMark(streams, objectMode);\n    const passThroughStream = new MergedStream({\n        objectMode,\n        writableHighWaterMark: highWaterMark,\n        readableHighWaterMark: highWaterMark\n    });\n    for (const stream of streams){\n        passThroughStream.add(stream);\n    }\n    return passThroughStream;\n}\nconst getHighWaterMark = (streams, objectMode)=>{\n    if (streams.length === 0) {\n        return (0,node_stream__WEBPACK_IMPORTED_MODULE_1__.getDefaultHighWaterMark)(objectMode);\n    }\n    const highWaterMarks = streams.filter(({ readableObjectMode })=>readableObjectMode === objectMode).map(({ readableHighWaterMark })=>readableHighWaterMark);\n    return Math.max(...highWaterMarks);\n};\nclass MergedStream extends node_stream__WEBPACK_IMPORTED_MODULE_1__.PassThrough {\n    #streams;\n    #ended;\n    #aborted;\n    #onFinished;\n    #unpipeEvent;\n    #streamPromises;\n    add(stream) {\n        validateStream(stream);\n        if (this.#streams.has(stream)) {\n            return;\n        }\n        this.#streams.add(stream);\n        this.#onFinished ??= onMergedStreamFinished(this, this.#streams, this.#unpipeEvent);\n        const streamPromise = endWhenStreamsDone({\n            passThroughStream: this,\n            stream,\n            streams: this.#streams,\n            ended: this.#ended,\n            aborted: this.#aborted,\n            onFinished: this.#onFinished,\n            unpipeEvent: this.#unpipeEvent\n        });\n        this.#streamPromises.set(stream, streamPromise);\n        stream.pipe(this, {\n            end: false\n        });\n    }\n    async remove(stream) {\n        validateStream(stream);\n        if (!this.#streams.has(stream)) {\n            return false;\n        }\n        const streamPromise = this.#streamPromises.get(stream);\n        if (streamPromise === undefined) {\n            return false;\n        }\n        this.#streamPromises.delete(stream);\n        stream.unpipe(this);\n        await streamPromise;\n        return true;\n    }\n    constructor(...args){\n        super(...args);\n        this.#streams = new Set([]);\n        this.#ended = new Set([]);\n        this.#aborted = new Set([]);\n        this.#unpipeEvent = Symbol(\"unpipe\");\n        this.#streamPromises = new WeakMap();\n    }\n}\nconst onMergedStreamFinished = async (passThroughStream, streams, unpipeEvent)=>{\n    updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_COUNT);\n    const controller = new AbortController();\n    try {\n        await Promise.race([\n            onMergedStreamEnd(passThroughStream, controller),\n            onInputStreamsUnpipe(passThroughStream, streams, unpipeEvent, controller)\n        ]);\n    } finally{\n        controller.abort();\n        updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_COUNT);\n    }\n};\nconst onMergedStreamEnd = async (passThroughStream, { signal })=>{\n    try {\n        await (0,node_stream_promises__WEBPACK_IMPORTED_MODULE_2__.finished)(passThroughStream, {\n            signal,\n            cleanup: true\n        });\n    } catch (error) {\n        errorOrAbortStream(passThroughStream, error);\n        throw error;\n    }\n};\nconst onInputStreamsUnpipe = async (passThroughStream, streams, unpipeEvent, { signal })=>{\n    for await (const [unpipedStream] of (0,node_events__WEBPACK_IMPORTED_MODULE_0__.on)(passThroughStream, \"unpipe\", {\n        signal\n    })){\n        if (streams.has(unpipedStream)) {\n            unpipedStream.emit(unpipeEvent);\n        }\n    }\n};\nconst validateStream = (stream)=>{\n    if (typeof stream?.pipe !== \"function\") {\n        throw new TypeError(`Expected a readable stream, got: \\`${typeof stream}\\`.`);\n    }\n};\nconst endWhenStreamsDone = async ({ passThroughStream, stream, streams, ended, aborted, onFinished, unpipeEvent })=>{\n    updateMaxListeners(passThroughStream, PASSTHROUGH_LISTENERS_PER_STREAM);\n    const controller = new AbortController();\n    try {\n        await Promise.race([\n            afterMergedStreamFinished(onFinished, stream, controller),\n            onInputStreamEnd({\n                passThroughStream,\n                stream,\n                streams,\n                ended,\n                aborted,\n                controller\n            }),\n            onInputStreamUnpipe({\n                stream,\n                streams,\n                ended,\n                aborted,\n                unpipeEvent,\n                controller\n            })\n        ]);\n    } finally{\n        controller.abort();\n        updateMaxListeners(passThroughStream, -PASSTHROUGH_LISTENERS_PER_STREAM);\n    }\n    if (streams.size > 0 && streams.size === ended.size + aborted.size) {\n        if (ended.size === 0 && aborted.size > 0) {\n            abortStream(passThroughStream);\n        } else {\n            endStream(passThroughStream);\n        }\n    }\n};\nconst afterMergedStreamFinished = async (onFinished, stream, { signal })=>{\n    try {\n        await onFinished;\n        if (!signal.aborted) {\n            abortStream(stream);\n        }\n    } catch (error) {\n        if (!signal.aborted) {\n            errorOrAbortStream(stream, error);\n        }\n    }\n};\nconst onInputStreamEnd = async ({ passThroughStream, stream, streams, ended, aborted, controller: { signal } })=>{\n    try {\n        await (0,node_stream_promises__WEBPACK_IMPORTED_MODULE_2__.finished)(stream, {\n            signal,\n            cleanup: true,\n            readable: true,\n            writable: false\n        });\n        if (streams.has(stream)) {\n            ended.add(stream);\n        }\n    } catch (error) {\n        if (signal.aborted || !streams.has(stream)) {\n            return;\n        }\n        if (isAbortError(error)) {\n            aborted.add(stream);\n        } else {\n            errorStream(passThroughStream, error);\n        }\n    }\n};\nconst onInputStreamUnpipe = async ({ stream, streams, ended, aborted, unpipeEvent, controller: { signal } })=>{\n    await (0,node_events__WEBPACK_IMPORTED_MODULE_0__.once)(stream, unpipeEvent, {\n        signal\n    });\n    if (!stream.readable) {\n        return (0,node_events__WEBPACK_IMPORTED_MODULE_0__.once)(signal, \"abort\", {\n            signal\n        });\n    }\n    streams.delete(stream);\n    ended.delete(stream);\n    aborted.delete(stream);\n};\nconst endStream = (stream)=>{\n    if (stream.writable) {\n        stream.end();\n    }\n};\nconst errorOrAbortStream = (stream, error)=>{\n    if (isAbortError(error)) {\n        abortStream(stream);\n    } else {\n        errorStream(stream, error);\n    }\n};\n// This is the error thrown by `finished()` on `stream.destroy()`\nconst isAbortError = (error)=>error?.code === \"ERR_STREAM_PREMATURE_CLOSE\";\nconst abortStream = (stream)=>{\n    if (stream.readable || stream.writable) {\n        stream.destroy();\n    }\n};\n// `stream.destroy(error)` crashes the process with `uncaughtException` if no `error` event listener exists on `stream`.\n// We take care of error handling on user behalf, so we do not want this to happen.\nconst errorStream = (stream, error)=>{\n    if (!stream.destroyed) {\n        stream.once(\"error\", noop);\n        stream.destroy(error);\n    }\n};\nconst noop = ()=>{};\nconst updateMaxListeners = (passThroughStream, increment)=>{\n    const maxListeners = passThroughStream.getMaxListeners();\n    if (maxListeners !== 0 && maxListeners !== Number.POSITIVE_INFINITY) {\n        passThroughStream.setMaxListeners(maxListeners + increment);\n    }\n};\n// Number of times `passThroughStream.on()` is called regardless of streams:\n//  - once due to `finished(passThroughStream)`\n//  - once due to `on(passThroughStream)`\nconst PASSTHROUGH_LISTENERS_COUNT = 2;\n// Number of times `passThroughStream.on()` is called per stream:\n//  - once due to `stream.pipe(passThroughStream)`\nconst PASSTHROUGH_LISTENERS_PER_STREAM = 1;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sindresorhus+merge-streams@4.0.0/node_modules/@sindresorhus/merge-streams/index.js\n");

/***/ })

};
;