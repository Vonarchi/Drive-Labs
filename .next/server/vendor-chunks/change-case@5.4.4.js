"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/change-case@5.4.4";
exports.ids = ["vendor-chunks/change-case@5.4.4"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/change-case@5.4.4/node_modules/change-case/dist/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/change-case@5.4.4/node_modules/change-case/dist/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   camelCase: () => (/* binding */ camelCase),\n/* harmony export */   capitalCase: () => (/* binding */ capitalCase),\n/* harmony export */   constantCase: () => (/* binding */ constantCase),\n/* harmony export */   dotCase: () => (/* binding */ dotCase),\n/* harmony export */   kebabCase: () => (/* binding */ kebabCase),\n/* harmony export */   noCase: () => (/* binding */ noCase),\n/* harmony export */   pascalCase: () => (/* binding */ pascalCase),\n/* harmony export */   pascalSnakeCase: () => (/* binding */ pascalSnakeCase),\n/* harmony export */   pathCase: () => (/* binding */ pathCase),\n/* harmony export */   sentenceCase: () => (/* binding */ sentenceCase),\n/* harmony export */   snakeCase: () => (/* binding */ snakeCase),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   splitSeparateNumbers: () => (/* binding */ splitSeparateNumbers),\n/* harmony export */   trainCase: () => (/* binding */ trainCase)\n/* harmony export */ });\n// Regexps involved with splitting words in various case formats.\nconst SPLIT_LOWER_UPPER_RE = /([\\p{Ll}\\d])(\\p{Lu})/gu;\nconst SPLIT_UPPER_UPPER_RE = /(\\p{Lu})([\\p{Lu}][\\p{Ll}])/gu;\n// Used to iterate over the initial split result and separate numbers.\nconst SPLIT_SEPARATE_NUMBER_RE = /(\\d)\\p{Ll}|(\\p{L})\\d/u;\n// Regexp involved with stripping non-word characters from the result.\nconst DEFAULT_STRIP_REGEXP = /[^\\p{L}\\d]+/giu;\n// The replacement value for splits.\nconst SPLIT_REPLACE_VALUE = \"$1\\x00$2\";\n// The default characters to keep after transforming case.\nconst DEFAULT_PREFIX_SUFFIX_CHARACTERS = \"\";\n/**\n * Split any cased input strings into an array of words.\n */ function split(value) {\n    let result = value.trim();\n    result = result.replace(SPLIT_LOWER_UPPER_RE, SPLIT_REPLACE_VALUE).replace(SPLIT_UPPER_UPPER_RE, SPLIT_REPLACE_VALUE);\n    result = result.replace(DEFAULT_STRIP_REGEXP, \"\\x00\");\n    let start = 0;\n    let end = result.length;\n    // Trim the delimiter from around the output string.\n    while(result.charAt(start) === \"\\x00\")start++;\n    if (start === end) return [];\n    while(result.charAt(end - 1) === \"\\x00\")end--;\n    return result.slice(start, end).split(/\\0/g);\n}\n/**\n * Split the input string into an array of words, separating numbers.\n */ function splitSeparateNumbers(value) {\n    const words = split(value);\n    for(let i = 0; i < words.length; i++){\n        const word = words[i];\n        const match = SPLIT_SEPARATE_NUMBER_RE.exec(word);\n        if (match) {\n            const offset = match.index + (match[1] ?? match[2]).length;\n            words.splice(i, 1, word.slice(0, offset), word.slice(offset));\n        }\n    }\n    return words;\n}\n/**\n * Convert a string to space separated lower case (`foo bar`).\n */ function noCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    return prefix + words.map(lowerFactory(options?.locale)).join(options?.delimiter ?? \" \") + suffix;\n}\n/**\n * Convert a string to camel case (`fooBar`).\n */ function camelCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters ? capitalCaseTransformFactory(lower, upper) : pascalCaseTransformFactory(lower, upper);\n    return prefix + words.map((word, index)=>{\n        if (index === 0) return lower(word);\n        return transform(word, index);\n    }).join(options?.delimiter ?? \"\") + suffix;\n}\n/**\n * Convert a string to pascal case (`FooBar`).\n */ function pascalCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = options?.mergeAmbiguousCharacters ? capitalCaseTransformFactory(lower, upper) : pascalCaseTransformFactory(lower, upper);\n    return prefix + words.map(transform).join(options?.delimiter ?? \"\") + suffix;\n}\n/**\n * Convert a string to pascal snake case (`Foo_Bar`).\n */ function pascalSnakeCase(input, options) {\n    return capitalCase(input, {\n        delimiter: \"_\",\n        ...options\n    });\n}\n/**\n * Convert a string to capital case (`Foo Bar`).\n */ function capitalCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    return prefix + words.map(capitalCaseTransformFactory(lower, upper)).join(options?.delimiter ?? \" \") + suffix;\n}\n/**\n * Convert a string to constant case (`FOO_BAR`).\n */ function constantCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    return prefix + words.map(upperFactory(options?.locale)).join(options?.delimiter ?? \"_\") + suffix;\n}\n/**\n * Convert a string to dot case (`foo.bar`).\n */ function dotCase(input, options) {\n    return noCase(input, {\n        delimiter: \".\",\n        ...options\n    });\n}\n/**\n * Convert a string to kebab case (`foo-bar`).\n */ function kebabCase(input, options) {\n    return noCase(input, {\n        delimiter: \"-\",\n        ...options\n    });\n}\n/**\n * Convert a string to path case (`foo/bar`).\n */ function pathCase(input, options) {\n    return noCase(input, {\n        delimiter: \"/\",\n        ...options\n    });\n}\n/**\n * Convert a string to path case (`Foo bar`).\n */ function sentenceCase(input, options) {\n    const [prefix, words, suffix] = splitPrefixSuffix(input, options);\n    const lower = lowerFactory(options?.locale);\n    const upper = upperFactory(options?.locale);\n    const transform = capitalCaseTransformFactory(lower, upper);\n    return prefix + words.map((word, index)=>{\n        if (index === 0) return transform(word);\n        return lower(word);\n    }).join(options?.delimiter ?? \" \") + suffix;\n}\n/**\n * Convert a string to snake case (`foo_bar`).\n */ function snakeCase(input, options) {\n    return noCase(input, {\n        delimiter: \"_\",\n        ...options\n    });\n}\n/**\n * Convert a string to header case (`Foo-Bar`).\n */ function trainCase(input, options) {\n    return capitalCase(input, {\n        delimiter: \"-\",\n        ...options\n    });\n}\nfunction lowerFactory(locale) {\n    return locale === false ? (input)=>input.toLowerCase() : (input)=>input.toLocaleLowerCase(locale);\n}\nfunction upperFactory(locale) {\n    return locale === false ? (input)=>input.toUpperCase() : (input)=>input.toLocaleUpperCase(locale);\n}\nfunction capitalCaseTransformFactory(lower, upper) {\n    return (word)=>`${upper(word[0])}${lower(word.slice(1))}`;\n}\nfunction pascalCaseTransformFactory(lower, upper) {\n    return (word, index)=>{\n        const char0 = word[0];\n        const initial = index > 0 && char0 >= \"0\" && char0 <= \"9\" ? \"_\" + char0 : upper(char0);\n        return initial + lower(word.slice(1));\n    };\n}\nfunction splitPrefixSuffix(input, options = {}) {\n    const splitFn = options.split ?? (options.separateNumbers ? splitSeparateNumbers : split);\n    const prefixCharacters = options.prefixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    const suffixCharacters = options.suffixCharacters ?? DEFAULT_PREFIX_SUFFIX_CHARACTERS;\n    let prefixIndex = 0;\n    let suffixIndex = input.length;\n    while(prefixIndex < input.length){\n        const char = input.charAt(prefixIndex);\n        if (!prefixCharacters.includes(char)) break;\n        prefixIndex++;\n    }\n    while(suffixIndex > prefixIndex){\n        const index = suffixIndex - 1;\n        const char = input.charAt(index);\n        if (!suffixCharacters.includes(char)) break;\n        suffixIndex = index;\n    }\n    return [\n        input.slice(0, prefixIndex),\n        splitFn(input.slice(prefixIndex, suffixIndex)),\n        input.slice(suffixIndex)\n    ];\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/change-case@5.4.4/node_modules/change-case/dist/index.js\n");

/***/ })

};
;