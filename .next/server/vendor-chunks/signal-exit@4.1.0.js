"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/signal-exit@4.1.0";
exports.ids = ["vendor-chunks/signal-exit@4.1.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   load: () => (/* binding */ load),\n/* harmony export */   onExit: () => (/* binding */ onExit),\n/* harmony export */   signals: () => (/* reexport safe */ _signals_js__WEBPACK_IMPORTED_MODULE_0__.signals),\n/* harmony export */   unload: () => (/* binding */ unload)\n/* harmony export */ });\n/* harmony import */ var _signals_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./signals.js */ \"(rsc)/./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js\");\n// Note: since nyc uses this module to output coverage, any lines\n// that are in the direct sync flow of nyc's outputCoverage are\n// ignored, since we can never get coverage for them.\n// grab a reference to node's real process object right away\n\n\nconst processOk = (process)=>!!process && typeof process === \"object\" && typeof process.removeListener === \"function\" && typeof process.emit === \"function\" && typeof process.reallyExit === \"function\" && typeof process.listeners === \"function\" && typeof process.kill === \"function\" && typeof process.pid === \"number\" && typeof process.on === \"function\";\nconst kExitEmitter = Symbol.for(\"signal-exit emitter\");\nconst global = globalThis;\nconst ObjectDefineProperty = Object.defineProperty.bind(Object);\n// teeny special purpose ee\nclass Emitter {\n    constructor(){\n        this.emitted = {\n            afterExit: false,\n            exit: false\n        };\n        this.listeners = {\n            afterExit: [],\n            exit: []\n        };\n        this.count = 0;\n        this.id = Math.random();\n        if (global[kExitEmitter]) {\n            return global[kExitEmitter];\n        }\n        ObjectDefineProperty(global, kExitEmitter, {\n            value: this,\n            writable: false,\n            enumerable: false,\n            configurable: false\n        });\n    }\n    on(ev, fn) {\n        this.listeners[ev].push(fn);\n    }\n    removeListener(ev, fn) {\n        const list = this.listeners[ev];\n        const i = list.indexOf(fn);\n        /* c8 ignore start */ if (i === -1) {\n            return;\n        }\n        /* c8 ignore stop */ if (i === 0 && list.length === 1) {\n            list.length = 0;\n        } else {\n            list.splice(i, 1);\n        }\n    }\n    emit(ev, code, signal) {\n        if (this.emitted[ev]) {\n            return false;\n        }\n        this.emitted[ev] = true;\n        let ret = false;\n        for (const fn of this.listeners[ev]){\n            ret = fn(code, signal) === true || ret;\n        }\n        if (ev === \"exit\") {\n            ret = this.emit(\"afterExit\", code, signal) || ret;\n        }\n        return ret;\n    }\n}\nclass SignalExitBase {\n}\nconst signalExitWrap = (handler)=>{\n    return {\n        onExit (cb, opts) {\n            return handler.onExit(cb, opts);\n        },\n        load () {\n            return handler.load();\n        },\n        unload () {\n            return handler.unload();\n        }\n    };\n};\nclass SignalExitFallback extends SignalExitBase {\n    onExit() {\n        return ()=>{};\n    }\n    load() {}\n    unload() {}\n}\nclass SignalExit extends SignalExitBase {\n    // \"SIGHUP\" throws an `ENOSYS` error on Windows,\n    // so use a supported signal instead\n    /* c8 ignore start */ #hupSig;\n    /* c8 ignore stop */ #emitter;\n    #process;\n    #originalProcessEmit;\n    #originalProcessReallyExit;\n    #sigListeners;\n    #loaded;\n    constructor(process1){\n        super();\n        this.#hupSig = process.platform === \"win32\" ? \"SIGINT\" : \"SIGHUP\";\n        this.#emitter = new Emitter();\n        this.#sigListeners = {};\n        this.#loaded = false;\n        this.#process = process1;\n        // { <signal>: <listener fn>, ... }\n        this.#sigListeners = {};\n        for (const sig of _signals_js__WEBPACK_IMPORTED_MODULE_0__.signals){\n            this.#sigListeners[sig] = ()=>{\n                // If there are no other listeners, an exit is coming!\n                // Simplest way: remove us and then re-send the signal.\n                // We know that this will kill the process, so we can\n                // safely emit now.\n                const listeners = this.#process.listeners(sig);\n                let { count } = this.#emitter;\n                // This is a workaround for the fact that signal-exit v3 and signal\n                // exit v4 are not aware of each other, and each will attempt to let\n                // the other handle it, so neither of them do. To correct this, we\n                // detect if we're the only handler *except* for previous versions\n                // of signal-exit, and increment by the count of listeners it has\n                // created.\n                /* c8 ignore start */ const p = process1;\n                if (typeof p.__signal_exit_emitter__ === \"object\" && typeof p.__signal_exit_emitter__.count === \"number\") {\n                    count += p.__signal_exit_emitter__.count;\n                }\n                /* c8 ignore stop */ if (listeners.length === count) {\n                    this.unload();\n                    const ret = this.#emitter.emit(\"exit\", null, sig);\n                    /* c8 ignore start */ const s = sig === \"SIGHUP\" ? this.#hupSig : sig;\n                    if (!ret) process1.kill(process1.pid, s);\n                /* c8 ignore stop */ }\n            };\n        }\n        this.#originalProcessReallyExit = process1.reallyExit;\n        this.#originalProcessEmit = process1.emit;\n    }\n    onExit(cb, opts) {\n        /* c8 ignore start */ if (!processOk(this.#process)) {\n            return ()=>{};\n        }\n        /* c8 ignore stop */ if (this.#loaded === false) {\n            this.load();\n        }\n        const ev = opts?.alwaysLast ? \"afterExit\" : \"exit\";\n        this.#emitter.on(ev, cb);\n        return ()=>{\n            this.#emitter.removeListener(ev, cb);\n            if (this.#emitter.listeners[\"exit\"].length === 0 && this.#emitter.listeners[\"afterExit\"].length === 0) {\n                this.unload();\n            }\n        };\n    }\n    load() {\n        if (this.#loaded) {\n            return;\n        }\n        this.#loaded = true;\n        // This is the number of onSignalExit's that are in play.\n        // It's important so that we can count the correct number of\n        // listeners on signals, and don't wait for the other one to\n        // handle it instead of us.\n        this.#emitter.count += 1;\n        for (const sig of _signals_js__WEBPACK_IMPORTED_MODULE_0__.signals){\n            try {\n                const fn = this.#sigListeners[sig];\n                if (fn) this.#process.on(sig, fn);\n            } catch (_) {}\n        }\n        this.#process.emit = (ev, ...a)=>{\n            return this.#processEmit(ev, ...a);\n        };\n        this.#process.reallyExit = (code)=>{\n            return this.#processReallyExit(code);\n        };\n    }\n    unload() {\n        if (!this.#loaded) {\n            return;\n        }\n        this.#loaded = false;\n        _signals_js__WEBPACK_IMPORTED_MODULE_0__.signals.forEach((sig)=>{\n            const listener = this.#sigListeners[sig];\n            /* c8 ignore start */ if (!listener) {\n                throw new Error(\"Listener not defined for signal: \" + sig);\n            }\n            /* c8 ignore stop */ try {\n                this.#process.removeListener(sig, listener);\n            /* c8 ignore start */ } catch (_) {}\n        /* c8 ignore stop */ });\n        this.#process.emit = this.#originalProcessEmit;\n        this.#process.reallyExit = this.#originalProcessReallyExit;\n        this.#emitter.count -= 1;\n    }\n    #processReallyExit(code) {\n        /* c8 ignore start */ if (!processOk(this.#process)) {\n            return 0;\n        }\n        this.#process.exitCode = code || 0;\n        /* c8 ignore stop */ this.#emitter.emit(\"exit\", this.#process.exitCode, null);\n        return this.#originalProcessReallyExit.call(this.#process, this.#process.exitCode);\n    }\n    #processEmit(ev, ...args) {\n        const og = this.#originalProcessEmit;\n        if (ev === \"exit\" && processOk(this.#process)) {\n            if (typeof args[0] === \"number\") {\n                this.#process.exitCode = args[0];\n            /* c8 ignore start */ }\n            /* c8 ignore start */ const ret = og.call(this.#process, ev, ...args);\n            /* c8 ignore start */ this.#emitter.emit(\"exit\", this.#process.exitCode, null);\n            /* c8 ignore stop */ return ret;\n        } else {\n            return og.call(this.#process, ev, ...args);\n        }\n    }\n}\nconst process = globalThis.process;\n// wrap so that we call the method on the actual handler, without\n// exporting it directly.\nconst { /**\n * Called when the process is exiting, whether via signal, explicit\n * exit, or running out of stuff to do.\n *\n * If the global process object is not suitable for instrumentation,\n * then this will be a no-op.\n *\n * Returns a function that may be used to unload signal-exit.\n */ onExit, /**\n * Load the listeners.  Likely you never need to call this, unless\n * doing a rather deep integration with signal-exit functionality.\n * Mostly exposed for the benefit of testing.\n *\n * @internal\n */ load, /**\n * Unload the listeners.  Likely you never need to call this, unless\n * doing a rather deep integration with signal-exit functionality.\n * Mostly exposed for the benefit of testing.\n *\n * @internal\n */ unload } = signalExitWrap(processOk(process) ? new SignalExit(process) : new SignalExitFallback()); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   signals: () => (/* binding */ signals)\n/* harmony export */ });\n/**\n * This is not the set of all possible signals.\n *\n * It IS, however, the set of all signals that trigger\n * an exit on either Linux or BSD systems.  Linux is a\n * superset of the signal names supported on BSD, and\n * the unknown signals just fail to register, so we can\n * catch that easily enough.\n *\n * Windows signals are a different set, since there are\n * signals that terminate Windows processes, but don't\n * terminate (or don't even exist) on Posix systems.\n *\n * Don't bother with SIGKILL.  It's uncatchable, which\n * means that we can't fire any callbacks anyway.\n *\n * If a user does happen to register a handler on a non-\n * fatal signal like SIGWINCH or something, and then\n * exit, it'll end up firing `process.emit('exit')`, so\n * the handler will be fired anyway.\n *\n * SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised\n * artificially, inherently leave the process in a\n * state from which it is not safe to try and enter JS\n * listeners.\n */ const signals = [];\nsignals.push(\"SIGHUP\", \"SIGINT\", \"SIGTERM\");\nif (process.platform !== \"win32\") {\n    signals.push(\"SIGALRM\", \"SIGABRT\", \"SIGVTALRM\", \"SIGXCPU\", \"SIGXFSZ\", \"SIGUSR2\", \"SIGTRAP\", \"SIGSYS\", \"SIGQUIT\", \"SIGIOT\");\n}\nif (process.platform === \"linux\") {\n    signals.push(\"SIGIO\", \"SIGPOLL\", \"SIGPWR\", \"SIGSTKFLT\");\n} //# sourceMappingURL=signals.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vc2lnbmFsLWV4aXRANC4xLjAvbm9kZV9tb2R1bGVzL3NpZ25hbC1leGl0L2Rpc3QvbWpzL3NpZ25hbHMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBeUJDLEdBQ00sTUFBTUEsVUFBVSxFQUFFLENBQUM7QUFDMUJBLFFBQVFDLElBQUksQ0FBQyxVQUFVLFVBQVU7QUFDakMsSUFBSUMsUUFBUUMsUUFBUSxLQUFLLFNBQVM7SUFDOUJILFFBQVFDLElBQUksQ0FBQyxXQUFXLFdBQVcsYUFBYSxXQUFXLFdBQVcsV0FBVyxXQUFXLFVBQVUsV0FBVztBQUtySDtBQUNBLElBQUlDLFFBQVFDLFFBQVEsS0FBSyxTQUFTO0lBQzlCSCxRQUFRQyxJQUFJLENBQUMsU0FBUyxXQUFXLFVBQVU7QUFDL0MsRUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcml2ZS1sYWJzLW9yY2hlc3RyYXRvci8uL25vZGVfbW9kdWxlcy8ucG5wbS9zaWduYWwtZXhpdEA0LjEuMC9ub2RlX21vZHVsZXMvc2lnbmFsLWV4aXQvZGlzdC9tanMvc2lnbmFscy5qcz81NjgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhpcyBpcyBub3QgdGhlIHNldCBvZiBhbGwgcG9zc2libGUgc2lnbmFscy5cbiAqXG4gKiBJdCBJUywgaG93ZXZlciwgdGhlIHNldCBvZiBhbGwgc2lnbmFscyB0aGF0IHRyaWdnZXJcbiAqIGFuIGV4aXQgb24gZWl0aGVyIExpbnV4IG9yIEJTRCBzeXN0ZW1zLiAgTGludXggaXMgYVxuICogc3VwZXJzZXQgb2YgdGhlIHNpZ25hbCBuYW1lcyBzdXBwb3J0ZWQgb24gQlNELCBhbmRcbiAqIHRoZSB1bmtub3duIHNpZ25hbHMganVzdCBmYWlsIHRvIHJlZ2lzdGVyLCBzbyB3ZSBjYW5cbiAqIGNhdGNoIHRoYXQgZWFzaWx5IGVub3VnaC5cbiAqXG4gKiBXaW5kb3dzIHNpZ25hbHMgYXJlIGEgZGlmZmVyZW50IHNldCwgc2luY2UgdGhlcmUgYXJlXG4gKiBzaWduYWxzIHRoYXQgdGVybWluYXRlIFdpbmRvd3MgcHJvY2Vzc2VzLCBidXQgZG9uJ3RcbiAqIHRlcm1pbmF0ZSAob3IgZG9uJ3QgZXZlbiBleGlzdCkgb24gUG9zaXggc3lzdGVtcy5cbiAqXG4gKiBEb24ndCBib3RoZXIgd2l0aCBTSUdLSUxMLiAgSXQncyB1bmNhdGNoYWJsZSwgd2hpY2hcbiAqIG1lYW5zIHRoYXQgd2UgY2FuJ3QgZmlyZSBhbnkgY2FsbGJhY2tzIGFueXdheS5cbiAqXG4gKiBJZiBhIHVzZXIgZG9lcyBoYXBwZW4gdG8gcmVnaXN0ZXIgYSBoYW5kbGVyIG9uIGEgbm9uLVxuICogZmF0YWwgc2lnbmFsIGxpa2UgU0lHV0lOQ0ggb3Igc29tZXRoaW5nLCBhbmQgdGhlblxuICogZXhpdCwgaXQnbGwgZW5kIHVwIGZpcmluZyBgcHJvY2Vzcy5lbWl0KCdleGl0JylgLCBzb1xuICogdGhlIGhhbmRsZXIgd2lsbCBiZSBmaXJlZCBhbnl3YXkuXG4gKlxuICogU0lHQlVTLCBTSUdGUEUsIFNJR1NFR1YgYW5kIFNJR0lMTCwgd2hlbiBub3QgcmFpc2VkXG4gKiBhcnRpZmljaWFsbHksIGluaGVyZW50bHkgbGVhdmUgdGhlIHByb2Nlc3MgaW4gYVxuICogc3RhdGUgZnJvbSB3aGljaCBpdCBpcyBub3Qgc2FmZSB0byB0cnkgYW5kIGVudGVyIEpTXG4gKiBsaXN0ZW5lcnMuXG4gKi9cbmV4cG9ydCBjb25zdCBzaWduYWxzID0gW107XG5zaWduYWxzLnB1c2goJ1NJR0hVUCcsICdTSUdJTlQnLCAnU0lHVEVSTScpO1xuaWYgKHByb2Nlc3MucGxhdGZvcm0gIT09ICd3aW4zMicpIHtcbiAgICBzaWduYWxzLnB1c2goJ1NJR0FMUk0nLCAnU0lHQUJSVCcsICdTSUdWVEFMUk0nLCAnU0lHWENQVScsICdTSUdYRlNaJywgJ1NJR1VTUjInLCAnU0lHVFJBUCcsICdTSUdTWVMnLCAnU0lHUVVJVCcsICdTSUdJT1QnXG4gICAgLy8gc2hvdWxkIGRldGVjdCBwcm9maWxlciBhbmQgZW5hYmxlL2Rpc2FibGUgYWNjb3JkaW5nbHkuXG4gICAgLy8gc2VlICMyMVxuICAgIC8vICdTSUdQUk9GJ1xuICAgICk7XG59XG5pZiAocHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4Jykge1xuICAgIHNpZ25hbHMucHVzaCgnU0lHSU8nLCAnU0lHUE9MTCcsICdTSUdQV1InLCAnU0lHU1RLRkxUJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaWduYWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJzaWduYWxzIiwicHVzaCIsInByb2Nlc3MiLCJwbGF0Zm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/signal-exit@4.1.0/node_modules/signal-exit/dist/mjs/signals.js\n");

/***/ })

};
;