"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/cross-spawn@7.0.6";
exports.ids = ["vendor-chunks/cross-spawn@7.0.6"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js":
/*!********************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst cp = __webpack_require__(/*! child_process */ \"child_process\");\nconst parse = __webpack_require__(/*! ./lib/parse */ \"(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js\");\nconst enoent = __webpack_require__(/*! ./lib/enoent */ \"(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js\");\nfunction spawn(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n    // Spawn the child process\n    const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);\n    // Hook into child process \"exit\" event to emit an error if the command\n    // does not exists, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    enoent.hookChildProcess(spawned, parsed);\n    return spawned;\n}\nfunction spawnSync(command, args, options) {\n    // Parse the arguments\n    const parsed = parse(command, args, options);\n    // Spawn the child process\n    const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);\n    // Analyze if the command does not exist, see: https://github.com/IndigoUnited/node-cross-spawn/issues/16\n    result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);\n    return result;\n}\nmodule.exports = spawn;\nmodule.exports.spawn = spawn;\nmodule.exports.sync = spawnSync;\nmodule.exports._parse = parse;\nmodule.exports._enoent = enoent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFFdkIsU0FBU0csTUFBTUMsT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE9BQU87SUFDakMsc0JBQXNCO0lBQ3RCLE1BQU1DLFNBQVNOLE1BQU1HLFNBQVNDLE1BQU1DO0lBRXBDLDBCQUEwQjtJQUMxQixNQUFNRSxVQUFVVCxHQUFHSSxLQUFLLENBQUNJLE9BQU9ILE9BQU8sRUFBRUcsT0FBT0YsSUFBSSxFQUFFRSxPQUFPRCxPQUFPO0lBRXBFLHVFQUF1RTtJQUN2RSxtRkFBbUY7SUFDbkZKLE9BQU9PLGdCQUFnQixDQUFDRCxTQUFTRDtJQUVqQyxPQUFPQztBQUNYO0FBRUEsU0FBU0UsVUFBVU4sT0FBTyxFQUFFQyxJQUFJLEVBQUVDLE9BQU87SUFDckMsc0JBQXNCO0lBQ3RCLE1BQU1DLFNBQVNOLE1BQU1HLFNBQVNDLE1BQU1DO0lBRXBDLDBCQUEwQjtJQUMxQixNQUFNSyxTQUFTWixHQUFHVyxTQUFTLENBQUNILE9BQU9ILE9BQU8sRUFBRUcsT0FBT0YsSUFBSSxFQUFFRSxPQUFPRCxPQUFPO0lBRXZFLHlHQUF5RztJQUN6R0ssT0FBT0MsS0FBSyxHQUFHRCxPQUFPQyxLQUFLLElBQUlWLE9BQU9XLGdCQUFnQixDQUFDRixPQUFPRyxNQUFNLEVBQUVQO0lBRXRFLE9BQU9JO0FBQ1g7QUFFQUksT0FBT0MsT0FBTyxHQUFHYjtBQUNqQlksb0JBQW9CLEdBQUdaO0FBQ3ZCWSxtQkFBbUIsR0FBR0w7QUFFdEJLLHFCQUFxQixHQUFHZDtBQUN4QmMsc0JBQXNCLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpdmUtbGFicy1vcmNoZXN0cmF0b3IvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2luZGV4LmpzP2RkZjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBjcCA9IHJlcXVpcmUoJ2NoaWxkX3Byb2Nlc3MnKTtcbmNvbnN0IHBhcnNlID0gcmVxdWlyZSgnLi9saWIvcGFyc2UnKTtcbmNvbnN0IGVub2VudCA9IHJlcXVpcmUoJy4vbGliL2Vub2VudCcpO1xuXG5mdW5jdGlvbiBzcGF3bihjb21tYW5kLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgLy8gUGFyc2UgdGhlIGFyZ3VtZW50c1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpO1xuXG4gICAgLy8gU3Bhd24gdGhlIGNoaWxkIHByb2Nlc3NcbiAgICBjb25zdCBzcGF3bmVkID0gY3Auc3Bhd24ocGFyc2VkLmNvbW1hbmQsIHBhcnNlZC5hcmdzLCBwYXJzZWQub3B0aW9ucyk7XG5cbiAgICAvLyBIb29rIGludG8gY2hpbGQgcHJvY2VzcyBcImV4aXRcIiBldmVudCB0byBlbWl0IGFuIGVycm9yIGlmIHRoZSBjb21tYW5kXG4gICAgLy8gZG9lcyBub3QgZXhpc3RzLCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9JbmRpZ29Vbml0ZWQvbm9kZS1jcm9zcy1zcGF3bi9pc3N1ZXMvMTZcbiAgICBlbm9lbnQuaG9va0NoaWxkUHJvY2VzcyhzcGF3bmVkLCBwYXJzZWQpO1xuXG4gICAgcmV0dXJuIHNwYXduZWQ7XG59XG5cbmZ1bmN0aW9uIHNwYXduU3luYyhjb21tYW5kLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgLy8gUGFyc2UgdGhlIGFyZ3VtZW50c1xuICAgIGNvbnN0IHBhcnNlZCA9IHBhcnNlKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpO1xuXG4gICAgLy8gU3Bhd24gdGhlIGNoaWxkIHByb2Nlc3NcbiAgICBjb25zdCByZXN1bHQgPSBjcC5zcGF3blN5bmMocGFyc2VkLmNvbW1hbmQsIHBhcnNlZC5hcmdzLCBwYXJzZWQub3B0aW9ucyk7XG5cbiAgICAvLyBBbmFseXplIGlmIHRoZSBjb21tYW5kIGRvZXMgbm90IGV4aXN0LCBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9JbmRpZ29Vbml0ZWQvbm9kZS1jcm9zcy1zcGF3bi9pc3N1ZXMvMTZcbiAgICByZXN1bHQuZXJyb3IgPSByZXN1bHQuZXJyb3IgfHwgZW5vZW50LnZlcmlmeUVOT0VOVFN5bmMocmVzdWx0LnN0YXR1cywgcGFyc2VkKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3Bhd247XG5tb2R1bGUuZXhwb3J0cy5zcGF3biA9IHNwYXduO1xubW9kdWxlLmV4cG9ydHMuc3luYyA9IHNwYXduU3luYztcblxubW9kdWxlLmV4cG9ydHMuX3BhcnNlID0gcGFyc2U7XG5tb2R1bGUuZXhwb3J0cy5fZW5vZW50ID0gZW5vZW50O1xuIl0sIm5hbWVzIjpbImNwIiwicmVxdWlyZSIsInBhcnNlIiwiZW5vZW50Iiwic3Bhd24iLCJjb21tYW5kIiwiYXJncyIsIm9wdGlvbnMiLCJwYXJzZWQiLCJzcGF3bmVkIiwiaG9va0NoaWxkUHJvY2VzcyIsInNwYXduU3luYyIsInJlc3VsdCIsImVycm9yIiwidmVyaWZ5RU5PRU5UU3luYyIsInN0YXR1cyIsIm1vZHVsZSIsImV4cG9ydHMiLCJzeW5jIiwiX3BhcnNlIiwiX2Vub2VudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js ***!
  \*************************************************************************************/
/***/ ((module) => {

eval("\nconst isWin = process.platform === \"win32\";\nfunction notFoundError(original, syscall) {\n    return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {\n        code: \"ENOENT\",\n        errno: \"ENOENT\",\n        syscall: `${syscall} ${original.command}`,\n        path: original.command,\n        spawnargs: original.args\n    });\n}\nfunction hookChildProcess(cp, parsed) {\n    if (!isWin) {\n        return;\n    }\n    const originalEmit = cp.emit;\n    cp.emit = function(name, arg1) {\n        // If emitting \"exit\" event and exit code is 1, we need to check if\n        // the command exists and emit an \"error\" instead\n        // See https://github.com/IndigoUnited/node-cross-spawn/issues/16\n        if (name === \"exit\") {\n            const err = verifyENOENT(arg1, parsed);\n            if (err) {\n                return originalEmit.call(cp, \"error\", err);\n            }\n        }\n        return originalEmit.apply(cp, arguments); // eslint-disable-line prefer-rest-params\n    };\n}\nfunction verifyENOENT(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, \"spawn\");\n    }\n    return null;\n}\nfunction verifyENOENTSync(status, parsed) {\n    if (isWin && status === 1 && !parsed.file) {\n        return notFoundError(parsed.original, \"spawnSync\");\n    }\n    return null;\n}\nmodule.exports = {\n    hookChildProcess,\n    verifyENOENT,\n    verifyENOENTSync,\n    notFoundError\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi9lbm9lbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxRQUFRQyxRQUFRQyxRQUFRLEtBQUs7QUFFbkMsU0FBU0MsY0FBY0MsUUFBUSxFQUFFQyxPQUFPO0lBQ3BDLE9BQU9DLE9BQU9DLE1BQU0sQ0FBQyxJQUFJQyxNQUFNLENBQUMsRUFBRUgsUUFBUSxDQUFDLEVBQUVELFNBQVNLLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRztRQUNyRUMsTUFBTTtRQUNOQyxPQUFPO1FBQ1BOLFNBQVMsQ0FBQyxFQUFFQSxRQUFRLENBQUMsRUFBRUQsU0FBU0ssT0FBTyxDQUFDLENBQUM7UUFDekNHLE1BQU1SLFNBQVNLLE9BQU87UUFDdEJJLFdBQVdULFNBQVNVLElBQUk7SUFDNUI7QUFDSjtBQUVBLFNBQVNDLGlCQUFpQkMsRUFBRSxFQUFFQyxNQUFNO0lBQ2hDLElBQUksQ0FBQ2pCLE9BQU87UUFDUjtJQUNKO0lBRUEsTUFBTWtCLGVBQWVGLEdBQUdHLElBQUk7SUFFNUJILEdBQUdHLElBQUksR0FBRyxTQUFVQyxJQUFJLEVBQUVDLElBQUk7UUFDMUIsbUVBQW1FO1FBQ25FLGlEQUFpRDtRQUNqRCxpRUFBaUU7UUFDakUsSUFBSUQsU0FBUyxRQUFRO1lBQ2pCLE1BQU1FLE1BQU1DLGFBQWFGLE1BQU1KO1lBRS9CLElBQUlLLEtBQUs7Z0JBQ0wsT0FBT0osYUFBYU0sSUFBSSxDQUFDUixJQUFJLFNBQVNNO1lBQzFDO1FBQ0o7UUFFQSxPQUFPSixhQUFhTyxLQUFLLENBQUNULElBQUlVLFlBQVkseUNBQXlDO0lBQ3ZGO0FBQ0o7QUFFQSxTQUFTSCxhQUFhSSxNQUFNLEVBQUVWLE1BQU07SUFDaEMsSUFBSWpCLFNBQVMyQixXQUFXLEtBQUssQ0FBQ1YsT0FBT1csSUFBSSxFQUFFO1FBQ3ZDLE9BQU96QixjQUFjYyxPQUFPYixRQUFRLEVBQUU7SUFDMUM7SUFFQSxPQUFPO0FBQ1g7QUFFQSxTQUFTeUIsaUJBQWlCRixNQUFNLEVBQUVWLE1BQU07SUFDcEMsSUFBSWpCLFNBQVMyQixXQUFXLEtBQUssQ0FBQ1YsT0FBT1csSUFBSSxFQUFFO1FBQ3ZDLE9BQU96QixjQUFjYyxPQUFPYixRQUFRLEVBQUU7SUFDMUM7SUFFQSxPQUFPO0FBQ1g7QUFFQTBCLE9BQU9DLE9BQU8sR0FBRztJQUNiaEI7SUFDQVE7SUFDQU07SUFDQTFCO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9kcml2ZS1sYWJzLW9yY2hlc3RyYXRvci8uL25vZGVfbW9kdWxlcy8ucG5wbS9jcm9zcy1zcGF3bkA3LjAuNi9ub2RlX21vZHVsZXMvY3Jvc3Mtc3Bhd24vbGliL2Vub2VudC5qcz9jZGM5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgaXNXaW4gPSBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInO1xuXG5mdW5jdGlvbiBub3RGb3VuZEVycm9yKG9yaWdpbmFsLCBzeXNjYWxsKSB7XG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IEVycm9yKGAke3N5c2NhbGx9ICR7b3JpZ2luYWwuY29tbWFuZH0gRU5PRU5UYCksIHtcbiAgICAgICAgY29kZTogJ0VOT0VOVCcsXG4gICAgICAgIGVycm5vOiAnRU5PRU5UJyxcbiAgICAgICAgc3lzY2FsbDogYCR7c3lzY2FsbH0gJHtvcmlnaW5hbC5jb21tYW5kfWAsXG4gICAgICAgIHBhdGg6IG9yaWdpbmFsLmNvbW1hbmQsXG4gICAgICAgIHNwYXduYXJnczogb3JpZ2luYWwuYXJncyxcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gaG9va0NoaWxkUHJvY2VzcyhjcCwgcGFyc2VkKSB7XG4gICAgaWYgKCFpc1dpbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgb3JpZ2luYWxFbWl0ID0gY3AuZW1pdDtcblxuICAgIGNwLmVtaXQgPSBmdW5jdGlvbiAobmFtZSwgYXJnMSkge1xuICAgICAgICAvLyBJZiBlbWl0dGluZyBcImV4aXRcIiBldmVudCBhbmQgZXhpdCBjb2RlIGlzIDEsIHdlIG5lZWQgdG8gY2hlY2sgaWZcbiAgICAgICAgLy8gdGhlIGNvbW1hbmQgZXhpc3RzIGFuZCBlbWl0IGFuIFwiZXJyb3JcIiBpbnN0ZWFkXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vSW5kaWdvVW5pdGVkL25vZGUtY3Jvc3Mtc3Bhd24vaXNzdWVzLzE2XG4gICAgICAgIGlmIChuYW1lID09PSAnZXhpdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IGVyciA9IHZlcmlmeUVOT0VOVChhcmcxLCBwYXJzZWQpO1xuXG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9yaWdpbmFsRW1pdC5jYWxsKGNwLCAnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsRW1pdC5hcHBseShjcCwgYXJndW1lbnRzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItcmVzdC1wYXJhbXNcbiAgICB9O1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlFTk9FTlQoc3RhdHVzLCBwYXJzZWQpIHtcbiAgICBpZiAoaXNXaW4gJiYgc3RhdHVzID09PSAxICYmICFwYXJzZWQuZmlsZSkge1xuICAgICAgICByZXR1cm4gbm90Rm91bmRFcnJvcihwYXJzZWQub3JpZ2luYWwsICdzcGF3bicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiB2ZXJpZnlFTk9FTlRTeW5jKHN0YXR1cywgcGFyc2VkKSB7XG4gICAgaWYgKGlzV2luICYmIHN0YXR1cyA9PT0gMSAmJiAhcGFyc2VkLmZpbGUpIHtcbiAgICAgICAgcmV0dXJuIG5vdEZvdW5kRXJyb3IocGFyc2VkLm9yaWdpbmFsLCAnc3Bhd25TeW5jJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGhvb2tDaGlsZFByb2Nlc3MsXG4gICAgdmVyaWZ5RU5PRU5ULFxuICAgIHZlcmlmeUVOT0VOVFN5bmMsXG4gICAgbm90Rm91bmRFcnJvcixcbn07XG4iXSwibmFtZXMiOlsiaXNXaW4iLCJwcm9jZXNzIiwicGxhdGZvcm0iLCJub3RGb3VuZEVycm9yIiwib3JpZ2luYWwiLCJzeXNjYWxsIiwiT2JqZWN0IiwiYXNzaWduIiwiRXJyb3IiLCJjb21tYW5kIiwiY29kZSIsImVycm5vIiwicGF0aCIsInNwYXduYXJncyIsImFyZ3MiLCJob29rQ2hpbGRQcm9jZXNzIiwiY3AiLCJwYXJzZWQiLCJvcmlnaW5hbEVtaXQiLCJlbWl0IiwibmFtZSIsImFyZzEiLCJlcnIiLCJ2ZXJpZnlFTk9FTlQiLCJjYWxsIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJzdGF0dXMiLCJmaWxlIiwidmVyaWZ5RU5PRU5UU3luYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/enoent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js":
/*!************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst resolveCommand = __webpack_require__(/*! ./util/resolveCommand */ \"(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js\");\nconst escape = __webpack_require__(/*! ./util/escape */ \"(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js\");\nconst readShebang = __webpack_require__(/*! ./util/readShebang */ \"(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js\");\nconst isWin = process.platform === \"win32\";\nconst isExecutableRegExp = /\\.(?:com|exe)$/i;\nconst isCmdShimRegExp = /node_modules[\\\\/].bin[\\\\/][^\\\\/]+\\.cmd$/i;\nfunction detectShebang(parsed) {\n    parsed.file = resolveCommand(parsed);\n    const shebang = parsed.file && readShebang(parsed.file);\n    if (shebang) {\n        parsed.args.unshift(parsed.file);\n        parsed.command = shebang;\n        return resolveCommand(parsed);\n    }\n    return parsed.file;\n}\nfunction parseNonShell(parsed) {\n    if (!isWin) {\n        return parsed;\n    }\n    // Detect & add support for shebangs\n    const commandFile = detectShebang(parsed);\n    // We don't need a shell if the command filename is an executable\n    const needsShell = !isExecutableRegExp.test(commandFile);\n    // If a shell is required, use cmd.exe and take care of escaping everything correctly\n    // Note that `forceShell` is an hidden option used only in tests\n    if (parsed.options.forceShell || needsShell) {\n        // Need to double escape meta chars if the command is a cmd-shim located in `node_modules/.bin/`\n        // The cmd-shim simply calls execute the package bin file with NodeJS, proxying any argument\n        // Because the escape of metachars with ^ gets interpreted when the cmd.exe is first called,\n        // we need to double escape them\n        const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);\n        // Normalize posix paths into OS compatible paths (e.g.: foo/bar -> foo\\bar)\n        // This is necessary otherwise it will always fail with ENOENT in those cases\n        parsed.command = path.normalize(parsed.command);\n        // Escape command & arguments\n        parsed.command = escape.command(parsed.command);\n        parsed.args = parsed.args.map((arg)=>escape.argument(arg, needsDoubleEscapeMetaChars));\n        const shellCommand = [\n            parsed.command\n        ].concat(parsed.args).join(\" \");\n        parsed.args = [\n            \"/d\",\n            \"/s\",\n            \"/c\",\n            `\"${shellCommand}\"`\n        ];\n        parsed.command = process.env.comspec || \"cmd.exe\";\n        parsed.options.windowsVerbatimArguments = true; // Tell node's spawn that the arguments are already escaped\n    }\n    return parsed;\n}\nfunction parse(command, args, options) {\n    // Normalize arguments, similar to nodejs\n    if (args && !Array.isArray(args)) {\n        options = args;\n        args = null;\n    }\n    args = args ? args.slice(0) : []; // Clone array to avoid changing the original\n    options = Object.assign({}, options); // Clone object to avoid changing the original\n    // Build our parsed object\n    const parsed = {\n        command,\n        args,\n        options,\n        file: undefined,\n        original: {\n            command,\n            args\n        }\n    };\n    // Delegate further parsing to shell or non-shell\n    return options.shell ? parsed : parseNonShell(parsed);\n}\nmodule.exports = parse;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU1BLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ3JCLE1BQU1DLGlCQUFpQkQsbUJBQU9BLENBQUM7QUFDL0IsTUFBTUUsU0FBU0YsbUJBQU9BLENBQUM7QUFDdkIsTUFBTUcsY0FBY0gsbUJBQU9BLENBQUM7QUFFNUIsTUFBTUksUUFBUUMsUUFBUUMsUUFBUSxLQUFLO0FBQ25DLE1BQU1DLHFCQUFxQjtBQUMzQixNQUFNQyxrQkFBa0I7QUFFeEIsU0FBU0MsY0FBY0MsTUFBTTtJQUN6QkEsT0FBT0MsSUFBSSxHQUFHVixlQUFlUztJQUU3QixNQUFNRSxVQUFVRixPQUFPQyxJQUFJLElBQUlSLFlBQVlPLE9BQU9DLElBQUk7SUFFdEQsSUFBSUMsU0FBUztRQUNURixPQUFPRyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0osT0FBT0MsSUFBSTtRQUMvQkQsT0FBT0ssT0FBTyxHQUFHSDtRQUVqQixPQUFPWCxlQUFlUztJQUMxQjtJQUVBLE9BQU9BLE9BQU9DLElBQUk7QUFDdEI7QUFFQSxTQUFTSyxjQUFjTixNQUFNO0lBQ3pCLElBQUksQ0FBQ04sT0FBTztRQUNSLE9BQU9NO0lBQ1g7SUFFQSxvQ0FBb0M7SUFDcEMsTUFBTU8sY0FBY1IsY0FBY0M7SUFFbEMsaUVBQWlFO0lBQ2pFLE1BQU1RLGFBQWEsQ0FBQ1gsbUJBQW1CWSxJQUFJLENBQUNGO0lBRTVDLHFGQUFxRjtJQUNyRixnRUFBZ0U7SUFDaEUsSUFBSVAsT0FBT1UsT0FBTyxDQUFDQyxVQUFVLElBQUlILFlBQVk7UUFDekMsZ0dBQWdHO1FBQ2hHLDRGQUE0RjtRQUM1Riw0RkFBNEY7UUFDNUYsZ0NBQWdDO1FBQ2hDLE1BQU1JLDZCQUE2QmQsZ0JBQWdCVyxJQUFJLENBQUNGO1FBRXhELDRFQUE0RTtRQUM1RSw2RUFBNkU7UUFDN0VQLE9BQU9LLE9BQU8sR0FBR2hCLEtBQUt3QixTQUFTLENBQUNiLE9BQU9LLE9BQU87UUFFOUMsNkJBQTZCO1FBQzdCTCxPQUFPSyxPQUFPLEdBQUdiLE9BQU9hLE9BQU8sQ0FBQ0wsT0FBT0ssT0FBTztRQUM5Q0wsT0FBT0csSUFBSSxHQUFHSCxPQUFPRyxJQUFJLENBQUNXLEdBQUcsQ0FBQyxDQUFDQyxNQUFRdkIsT0FBT3dCLFFBQVEsQ0FBQ0QsS0FBS0g7UUFFNUQsTUFBTUssZUFBZTtZQUFDakIsT0FBT0ssT0FBTztTQUFDLENBQUNhLE1BQU0sQ0FBQ2xCLE9BQU9HLElBQUksRUFBRWdCLElBQUksQ0FBQztRQUUvRG5CLE9BQU9HLElBQUksR0FBRztZQUFDO1lBQU07WUFBTTtZQUFNLENBQUMsQ0FBQyxFQUFFYyxhQUFhLENBQUMsQ0FBQztTQUFDO1FBQ3JEakIsT0FBT0ssT0FBTyxHQUFHVixRQUFReUIsR0FBRyxDQUFDQyxPQUFPLElBQUk7UUFDeENyQixPQUFPVSxPQUFPLENBQUNZLHdCQUF3QixHQUFHLE1BQU0sMkRBQTJEO0lBQy9HO0lBRUEsT0FBT3RCO0FBQ1g7QUFFQSxTQUFTdUIsTUFBTWxCLE9BQU8sRUFBRUYsSUFBSSxFQUFFTyxPQUFPO0lBQ2pDLHlDQUF5QztJQUN6QyxJQUFJUCxRQUFRLENBQUNxQixNQUFNQyxPQUFPLENBQUN0QixPQUFPO1FBQzlCTyxVQUFVUDtRQUNWQSxPQUFPO0lBQ1g7SUFFQUEsT0FBT0EsT0FBT0EsS0FBS3VCLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSw2Q0FBNkM7SUFDL0VoQixVQUFVaUIsT0FBT0MsTUFBTSxDQUFDLENBQUMsR0FBR2xCLFVBQVUsOENBQThDO0lBRXBGLDBCQUEwQjtJQUMxQixNQUFNVixTQUFTO1FBQ1hLO1FBQ0FGO1FBQ0FPO1FBQ0FULE1BQU00QjtRQUNOQyxVQUFVO1lBQ056QjtZQUNBRjtRQUNKO0lBQ0o7SUFFQSxpREFBaUQ7SUFDakQsT0FBT08sUUFBUXFCLEtBQUssR0FBRy9CLFNBQVNNLGNBQWNOO0FBQ2xEO0FBRUFnQyxPQUFPQyxPQUFPLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpdmUtbGFicy1vcmNoZXN0cmF0b3IvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi9wYXJzZS5qcz83NDFiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHJlc29sdmVDb21tYW5kID0gcmVxdWlyZSgnLi91dGlsL3Jlc29sdmVDb21tYW5kJyk7XG5jb25zdCBlc2NhcGUgPSByZXF1aXJlKCcuL3V0aWwvZXNjYXBlJyk7XG5jb25zdCByZWFkU2hlYmFuZyA9IHJlcXVpcmUoJy4vdXRpbC9yZWFkU2hlYmFuZycpO1xuXG5jb25zdCBpc1dpbiA9IHByb2Nlc3MucGxhdGZvcm0gPT09ICd3aW4zMic7XG5jb25zdCBpc0V4ZWN1dGFibGVSZWdFeHAgPSAvXFwuKD86Y29tfGV4ZSkkL2k7XG5jb25zdCBpc0NtZFNoaW1SZWdFeHAgPSAvbm9kZV9tb2R1bGVzW1xcXFwvXS5iaW5bXFxcXC9dW15cXFxcL10rXFwuY21kJC9pO1xuXG5mdW5jdGlvbiBkZXRlY3RTaGViYW5nKHBhcnNlZCkge1xuICAgIHBhcnNlZC5maWxlID0gcmVzb2x2ZUNvbW1hbmQocGFyc2VkKTtcblxuICAgIGNvbnN0IHNoZWJhbmcgPSBwYXJzZWQuZmlsZSAmJiByZWFkU2hlYmFuZyhwYXJzZWQuZmlsZSk7XG5cbiAgICBpZiAoc2hlYmFuZykge1xuICAgICAgICBwYXJzZWQuYXJncy51bnNoaWZ0KHBhcnNlZC5maWxlKTtcbiAgICAgICAgcGFyc2VkLmNvbW1hbmQgPSBzaGViYW5nO1xuXG4gICAgICAgIHJldHVybiByZXNvbHZlQ29tbWFuZChwYXJzZWQpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZWQuZmlsZTtcbn1cblxuZnVuY3Rpb24gcGFyc2VOb25TaGVsbChwYXJzZWQpIHtcbiAgICBpZiAoIWlzV2luKSB7XG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuXG4gICAgLy8gRGV0ZWN0ICYgYWRkIHN1cHBvcnQgZm9yIHNoZWJhbmdzXG4gICAgY29uc3QgY29tbWFuZEZpbGUgPSBkZXRlY3RTaGViYW5nKHBhcnNlZCk7XG5cbiAgICAvLyBXZSBkb24ndCBuZWVkIGEgc2hlbGwgaWYgdGhlIGNvbW1hbmQgZmlsZW5hbWUgaXMgYW4gZXhlY3V0YWJsZVxuICAgIGNvbnN0IG5lZWRzU2hlbGwgPSAhaXNFeGVjdXRhYmxlUmVnRXhwLnRlc3QoY29tbWFuZEZpbGUpO1xuXG4gICAgLy8gSWYgYSBzaGVsbCBpcyByZXF1aXJlZCwgdXNlIGNtZC5leGUgYW5kIHRha2UgY2FyZSBvZiBlc2NhcGluZyBldmVyeXRoaW5nIGNvcnJlY3RseVxuICAgIC8vIE5vdGUgdGhhdCBgZm9yY2VTaGVsbGAgaXMgYW4gaGlkZGVuIG9wdGlvbiB1c2VkIG9ubHkgaW4gdGVzdHNcbiAgICBpZiAocGFyc2VkLm9wdGlvbnMuZm9yY2VTaGVsbCB8fCBuZWVkc1NoZWxsKSB7XG4gICAgICAgIC8vIE5lZWQgdG8gZG91YmxlIGVzY2FwZSBtZXRhIGNoYXJzIGlmIHRoZSBjb21tYW5kIGlzIGEgY21kLXNoaW0gbG9jYXRlZCBpbiBgbm9kZV9tb2R1bGVzLy5iaW4vYFxuICAgICAgICAvLyBUaGUgY21kLXNoaW0gc2ltcGx5IGNhbGxzIGV4ZWN1dGUgdGhlIHBhY2thZ2UgYmluIGZpbGUgd2l0aCBOb2RlSlMsIHByb3h5aW5nIGFueSBhcmd1bWVudFxuICAgICAgICAvLyBCZWNhdXNlIHRoZSBlc2NhcGUgb2YgbWV0YWNoYXJzIHdpdGggXiBnZXRzIGludGVycHJldGVkIHdoZW4gdGhlIGNtZC5leGUgaXMgZmlyc3QgY2FsbGVkLFxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGRvdWJsZSBlc2NhcGUgdGhlbVxuICAgICAgICBjb25zdCBuZWVkc0RvdWJsZUVzY2FwZU1ldGFDaGFycyA9IGlzQ21kU2hpbVJlZ0V4cC50ZXN0KGNvbW1hbmRGaWxlKTtcblxuICAgICAgICAvLyBOb3JtYWxpemUgcG9zaXggcGF0aHMgaW50byBPUyBjb21wYXRpYmxlIHBhdGhzIChlLmcuOiBmb28vYmFyIC0+IGZvb1xcYmFyKVxuICAgICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBvdGhlcndpc2UgaXQgd2lsbCBhbHdheXMgZmFpbCB3aXRoIEVOT0VOVCBpbiB0aG9zZSBjYXNlc1xuICAgICAgICBwYXJzZWQuY29tbWFuZCA9IHBhdGgubm9ybWFsaXplKHBhcnNlZC5jb21tYW5kKTtcblxuICAgICAgICAvLyBFc2NhcGUgY29tbWFuZCAmIGFyZ3VtZW50c1xuICAgICAgICBwYXJzZWQuY29tbWFuZCA9IGVzY2FwZS5jb21tYW5kKHBhcnNlZC5jb21tYW5kKTtcbiAgICAgICAgcGFyc2VkLmFyZ3MgPSBwYXJzZWQuYXJncy5tYXAoKGFyZykgPT4gZXNjYXBlLmFyZ3VtZW50KGFyZywgbmVlZHNEb3VibGVFc2NhcGVNZXRhQ2hhcnMpKTtcblxuICAgICAgICBjb25zdCBzaGVsbENvbW1hbmQgPSBbcGFyc2VkLmNvbW1hbmRdLmNvbmNhdChwYXJzZWQuYXJncykuam9pbignICcpO1xuXG4gICAgICAgIHBhcnNlZC5hcmdzID0gWycvZCcsICcvcycsICcvYycsIGBcIiR7c2hlbGxDb21tYW5kfVwiYF07XG4gICAgICAgIHBhcnNlZC5jb21tYW5kID0gcHJvY2Vzcy5lbnYuY29tc3BlYyB8fCAnY21kLmV4ZSc7XG4gICAgICAgIHBhcnNlZC5vcHRpb25zLndpbmRvd3NWZXJiYXRpbUFyZ3VtZW50cyA9IHRydWU7IC8vIFRlbGwgbm9kZSdzIHNwYXduIHRoYXQgdGhlIGFyZ3VtZW50cyBhcmUgYWxyZWFkeSBlc2NhcGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlZDtcbn1cblxuZnVuY3Rpb24gcGFyc2UoY29tbWFuZCwgYXJncywgb3B0aW9ucykge1xuICAgIC8vIE5vcm1hbGl6ZSBhcmd1bWVudHMsIHNpbWlsYXIgdG8gbm9kZWpzXG4gICAgaWYgKGFyZ3MgJiYgIUFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgICAgb3B0aW9ucyA9IGFyZ3M7XG4gICAgICAgIGFyZ3MgPSBudWxsO1xuICAgIH1cblxuICAgIGFyZ3MgPSBhcmdzID8gYXJncy5zbGljZSgwKSA6IFtdOyAvLyBDbG9uZSBhcnJheSB0byBhdm9pZCBjaGFuZ2luZyB0aGUgb3JpZ2luYWxcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7IC8vIENsb25lIG9iamVjdCB0byBhdm9pZCBjaGFuZ2luZyB0aGUgb3JpZ2luYWxcblxuICAgIC8vIEJ1aWxkIG91ciBwYXJzZWQgb2JqZWN0XG4gICAgY29uc3QgcGFyc2VkID0ge1xuICAgICAgICBjb21tYW5kLFxuICAgICAgICBhcmdzLFxuICAgICAgICBvcHRpb25zLFxuICAgICAgICBmaWxlOiB1bmRlZmluZWQsXG4gICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICBjb21tYW5kLFxuICAgICAgICAgICAgYXJncyxcbiAgICAgICAgfSxcbiAgICB9O1xuXG4gICAgLy8gRGVsZWdhdGUgZnVydGhlciBwYXJzaW5nIHRvIHNoZWxsIG9yIG5vbi1zaGVsbFxuICAgIHJldHVybiBvcHRpb25zLnNoZWxsID8gcGFyc2VkIDogcGFyc2VOb25TaGVsbChwYXJzZWQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhcnNlO1xuIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwicmVzb2x2ZUNvbW1hbmQiLCJlc2NhcGUiLCJyZWFkU2hlYmFuZyIsImlzV2luIiwicHJvY2VzcyIsInBsYXRmb3JtIiwiaXNFeGVjdXRhYmxlUmVnRXhwIiwiaXNDbWRTaGltUmVnRXhwIiwiZGV0ZWN0U2hlYmFuZyIsInBhcnNlZCIsImZpbGUiLCJzaGViYW5nIiwiYXJncyIsInVuc2hpZnQiLCJjb21tYW5kIiwicGFyc2VOb25TaGVsbCIsImNvbW1hbmRGaWxlIiwibmVlZHNTaGVsbCIsInRlc3QiLCJvcHRpb25zIiwiZm9yY2VTaGVsbCIsIm5lZWRzRG91YmxlRXNjYXBlTWV0YUNoYXJzIiwibm9ybWFsaXplIiwibWFwIiwiYXJnIiwiYXJndW1lbnQiLCJzaGVsbENvbW1hbmQiLCJjb25jYXQiLCJqb2luIiwiZW52IiwiY29tc3BlYyIsIndpbmRvd3NWZXJiYXRpbUFyZ3VtZW50cyIsInBhcnNlIiwiQXJyYXkiLCJpc0FycmF5Iiwic2xpY2UiLCJPYmplY3QiLCJhc3NpZ24iLCJ1bmRlZmluZWQiLCJvcmlnaW5hbCIsInNoZWxsIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js ***!
  \******************************************************************************************/
/***/ ((module) => {

eval("\n// See http://www.robvanderwoude.com/escapechars.php\nconst metaCharsRegExp = /([()\\][%!^\"`<>&|;, *?])/g;\nfunction escapeCommand(arg) {\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, \"^$1\");\n    return arg;\n}\nfunction escapeArgument(arg, doubleEscapeMetaChars) {\n    // Convert to string\n    arg = `${arg}`;\n    // Algorithm below is based on https://qntm.org/cmd\n    // It's slightly altered to disable JS backtracking to avoid hanging on specially crafted input\n    // Please see https://github.com/moxystudio/node-cross-spawn/pull/160 for more information\n    // Sequence of backslashes followed by a double quote:\n    // double up all the backslashes and escape the double quote\n    arg = arg.replace(/(?=(\\\\+?)?)\\1\"/g, '$1$1\\\\\"');\n    // Sequence of backslashes followed by the end of the string\n    // (which will become a double quote later):\n    // double up all the backslashes\n    arg = arg.replace(/(?=(\\\\+?)?)\\1$/, \"$1$1\");\n    // All other backslashes occur literally\n    // Quote the whole thing:\n    arg = `\"${arg}\"`;\n    // Escape meta chars\n    arg = arg.replace(metaCharsRegExp, \"^$1\");\n    // Double escape meta chars if necessary\n    if (doubleEscapeMetaChars) {\n        arg = arg.replace(metaCharsRegExp, \"^$1\");\n    }\n    return arg;\n}\nmodule.exports.command = escapeCommand;\nmodule.exports.argument = escapeArgument;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL2VzY2FwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLG9EQUFvRDtBQUNwRCxNQUFNQSxrQkFBa0I7QUFFeEIsU0FBU0MsY0FBY0MsR0FBRztJQUN0QixvQkFBb0I7SUFDcEJBLE1BQU1BLElBQUlDLE9BQU8sQ0FBQ0gsaUJBQWlCO0lBRW5DLE9BQU9FO0FBQ1g7QUFFQSxTQUFTRSxlQUFlRixHQUFHLEVBQUVHLHFCQUFxQjtJQUM5QyxvQkFBb0I7SUFDcEJILE1BQU0sQ0FBQyxFQUFFQSxJQUFJLENBQUM7SUFFZCxtREFBbUQ7SUFDbkQsK0ZBQStGO0lBQy9GLDBGQUEwRjtJQUUxRixzREFBc0Q7SUFDdEQsNERBQTREO0lBQzVEQSxNQUFNQSxJQUFJQyxPQUFPLENBQUMsbUJBQW1CO0lBRXJDLDREQUE0RDtJQUM1RCw0Q0FBNEM7SUFDNUMsZ0NBQWdDO0lBQ2hDRCxNQUFNQSxJQUFJQyxPQUFPLENBQUMsa0JBQWtCO0lBRXBDLHdDQUF3QztJQUV4Qyx5QkFBeUI7SUFDekJELE1BQU0sQ0FBQyxDQUFDLEVBQUVBLElBQUksQ0FBQyxDQUFDO0lBRWhCLG9CQUFvQjtJQUNwQkEsTUFBTUEsSUFBSUMsT0FBTyxDQUFDSCxpQkFBaUI7SUFFbkMsd0NBQXdDO0lBQ3hDLElBQUlLLHVCQUF1QjtRQUN2QkgsTUFBTUEsSUFBSUMsT0FBTyxDQUFDSCxpQkFBaUI7SUFDdkM7SUFFQSxPQUFPRTtBQUNYO0FBRUFJLHNCQUFzQixHQUFHTDtBQUN6QkssdUJBQXVCLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpdmUtbGFicy1vcmNoZXN0cmF0b3IvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL2VzY2FwZS5qcz9mODAzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLy8gU2VlIGh0dHA6Ly93d3cucm9idmFuZGVyd291ZGUuY29tL2VzY2FwZWNoYXJzLnBocFxuY29uc3QgbWV0YUNoYXJzUmVnRXhwID0gLyhbKClcXF1bJSFeXCJgPD4mfDssICo/XSkvZztcblxuZnVuY3Rpb24gZXNjYXBlQ29tbWFuZChhcmcpIHtcbiAgICAvLyBFc2NhcGUgbWV0YSBjaGFyc1xuICAgIGFyZyA9IGFyZy5yZXBsYWNlKG1ldGFDaGFyc1JlZ0V4cCwgJ14kMScpO1xuXG4gICAgcmV0dXJuIGFyZztcbn1cblxuZnVuY3Rpb24gZXNjYXBlQXJndW1lbnQoYXJnLCBkb3VibGVFc2NhcGVNZXRhQ2hhcnMpIHtcbiAgICAvLyBDb252ZXJ0IHRvIHN0cmluZ1xuICAgIGFyZyA9IGAke2FyZ31gO1xuXG4gICAgLy8gQWxnb3JpdGhtIGJlbG93IGlzIGJhc2VkIG9uIGh0dHBzOi8vcW50bS5vcmcvY21kXG4gICAgLy8gSXQncyBzbGlnaHRseSBhbHRlcmVkIHRvIGRpc2FibGUgSlMgYmFja3RyYWNraW5nIHRvIGF2b2lkIGhhbmdpbmcgb24gc3BlY2lhbGx5IGNyYWZ0ZWQgaW5wdXRcbiAgICAvLyBQbGVhc2Ugc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3h5c3R1ZGlvL25vZGUtY3Jvc3Mtc3Bhd24vcHVsbC8xNjAgZm9yIG1vcmUgaW5mb3JtYXRpb25cblxuICAgIC8vIFNlcXVlbmNlIG9mIGJhY2tzbGFzaGVzIGZvbGxvd2VkIGJ5IGEgZG91YmxlIHF1b3RlOlxuICAgIC8vIGRvdWJsZSB1cCBhbGwgdGhlIGJhY2tzbGFzaGVzIGFuZCBlc2NhcGUgdGhlIGRvdWJsZSBxdW90ZVxuICAgIGFyZyA9IGFyZy5yZXBsYWNlKC8oPz0oXFxcXCs/KT8pXFwxXCIvZywgJyQxJDFcXFxcXCInKTtcblxuICAgIC8vIFNlcXVlbmNlIG9mIGJhY2tzbGFzaGVzIGZvbGxvd2VkIGJ5IHRoZSBlbmQgb2YgdGhlIHN0cmluZ1xuICAgIC8vICh3aGljaCB3aWxsIGJlY29tZSBhIGRvdWJsZSBxdW90ZSBsYXRlcik6XG4gICAgLy8gZG91YmxlIHVwIGFsbCB0aGUgYmFja3NsYXNoZXNcbiAgICBhcmcgPSBhcmcucmVwbGFjZSgvKD89KFxcXFwrPyk/KVxcMSQvLCAnJDEkMScpO1xuXG4gICAgLy8gQWxsIG90aGVyIGJhY2tzbGFzaGVzIG9jY3VyIGxpdGVyYWxseVxuXG4gICAgLy8gUXVvdGUgdGhlIHdob2xlIHRoaW5nOlxuICAgIGFyZyA9IGBcIiR7YXJnfVwiYDtcblxuICAgIC8vIEVzY2FwZSBtZXRhIGNoYXJzXG4gICAgYXJnID0gYXJnLnJlcGxhY2UobWV0YUNoYXJzUmVnRXhwLCAnXiQxJyk7XG5cbiAgICAvLyBEb3VibGUgZXNjYXBlIG1ldGEgY2hhcnMgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKGRvdWJsZUVzY2FwZU1ldGFDaGFycykge1xuICAgICAgICBhcmcgPSBhcmcucmVwbGFjZShtZXRhQ2hhcnNSZWdFeHAsICdeJDEnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJnO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5jb21tYW5kID0gZXNjYXBlQ29tbWFuZDtcbm1vZHVsZS5leHBvcnRzLmFyZ3VtZW50ID0gZXNjYXBlQXJndW1lbnQ7XG4iXSwibmFtZXMiOlsibWV0YUNoYXJzUmVnRXhwIiwiZXNjYXBlQ29tbWFuZCIsImFyZyIsInJlcGxhY2UiLCJlc2NhcGVBcmd1bWVudCIsImRvdWJsZUVzY2FwZU1ldGFDaGFycyIsIm1vZHVsZSIsImV4cG9ydHMiLCJjb21tYW5kIiwiYXJndW1lbnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/escape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst shebangCommand = __webpack_require__(/*! shebang-command */ \"(rsc)/./node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js\");\nfunction readShebang(command) {\n    // Read the first 150 bytes from the file\n    const size = 150;\n    const buffer = Buffer.alloc(size);\n    let fd;\n    try {\n        fd = fs.openSync(command, \"r\");\n        fs.readSync(fd, buffer, 0, size, 0);\n        fs.closeSync(fd);\n    } catch (e) {}\n    // Attempt to extract shebang (null is returned if not a shebang)\n    return shebangCommand(buffer.toString());\n}\nmodule.exports = readShebang;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL3JlYWRTaGViYW5nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsS0FBS0MsbUJBQU9BLENBQUM7QUFDbkIsTUFBTUMsaUJBQWlCRCxtQkFBT0EsQ0FBQztBQUUvQixTQUFTRSxZQUFZQyxPQUFPO0lBQ3hCLHlDQUF5QztJQUN6QyxNQUFNQyxPQUFPO0lBQ2IsTUFBTUMsU0FBU0MsT0FBT0MsS0FBSyxDQUFDSDtJQUU1QixJQUFJSTtJQUVKLElBQUk7UUFDQUEsS0FBS1QsR0FBR1UsUUFBUSxDQUFDTixTQUFTO1FBQzFCSixHQUFHVyxRQUFRLENBQUNGLElBQUlILFFBQVEsR0FBR0QsTUFBTTtRQUNqQ0wsR0FBR1ksU0FBUyxDQUFDSDtJQUNqQixFQUFFLE9BQU9JLEdBQUcsQ0FBYztJQUUxQixpRUFBaUU7SUFDakUsT0FBT1gsZUFBZUksT0FBT1EsUUFBUTtBQUN6QztBQUVBQyxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpdmUtbGFicy1vcmNoZXN0cmF0b3IvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL3JlYWRTaGViYW5nLmpzP2FlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5jb25zdCBzaGViYW5nQ29tbWFuZCA9IHJlcXVpcmUoJ3NoZWJhbmctY29tbWFuZCcpO1xuXG5mdW5jdGlvbiByZWFkU2hlYmFuZyhjb21tYW5kKSB7XG4gICAgLy8gUmVhZCB0aGUgZmlyc3QgMTUwIGJ5dGVzIGZyb20gdGhlIGZpbGVcbiAgICBjb25zdCBzaXplID0gMTUwO1xuICAgIGNvbnN0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyhzaXplKTtcblxuICAgIGxldCBmZDtcblxuICAgIHRyeSB7XG4gICAgICAgIGZkID0gZnMub3BlblN5bmMoY29tbWFuZCwgJ3InKTtcbiAgICAgICAgZnMucmVhZFN5bmMoZmQsIGJ1ZmZlciwgMCwgc2l6ZSwgMCk7XG4gICAgICAgIGZzLmNsb3NlU3luYyhmZCk7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiBFbXB0eSAqLyB9XG5cbiAgICAvLyBBdHRlbXB0IHRvIGV4dHJhY3Qgc2hlYmFuZyAobnVsbCBpcyByZXR1cm5lZCBpZiBub3QgYSBzaGViYW5nKVxuICAgIHJldHVybiBzaGViYW5nQ29tbWFuZChidWZmZXIudG9TdHJpbmcoKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcmVhZFNoZWJhbmc7XG4iXSwibmFtZXMiOlsiZnMiLCJyZXF1aXJlIiwic2hlYmFuZ0NvbW1hbmQiLCJyZWFkU2hlYmFuZyIsImNvbW1hbmQiLCJzaXplIiwiYnVmZmVyIiwiQnVmZmVyIiwiYWxsb2MiLCJmZCIsIm9wZW5TeW5jIiwicmVhZFN5bmMiLCJjbG9zZVN5bmMiLCJlIiwidG9TdHJpbmciLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/readShebang.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst path = __webpack_require__(/*! path */ \"path\");\nconst which = __webpack_require__(/*! which */ \"(rsc)/./node_modules/.pnpm/which@2.0.2/node_modules/which/which.js\");\nconst getPathKey = __webpack_require__(/*! path-key */ \"(rsc)/./node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js\");\nfunction resolveCommandAttempt(parsed, withoutPathExt) {\n    const env = parsed.options.env || process.env;\n    const cwd = process.cwd();\n    const hasCustomCwd = parsed.options.cwd != null;\n    // Worker threads do not have process.chdir()\n    const shouldSwitchCwd = hasCustomCwd && process.chdir !== undefined && !process.chdir.disabled;\n    // If a custom `cwd` was specified, we need to change the process cwd\n    // because `which` will do stat calls but does not support a custom cwd\n    if (shouldSwitchCwd) {\n        try {\n            process.chdir(parsed.options.cwd);\n        } catch (err) {\n        /* Empty */ }\n    }\n    let resolved;\n    try {\n        resolved = which.sync(parsed.command, {\n            path: env[getPathKey({\n                env\n            })],\n            pathExt: withoutPathExt ? path.delimiter : undefined\n        });\n    } catch (e) {\n    /* Empty */ } finally{\n        if (shouldSwitchCwd) {\n            process.chdir(cwd);\n        }\n    }\n    // If we successfully resolved, ensure that an absolute path is returned\n    // Note that when a custom `cwd` was used, we need to resolve to an absolute path based on it\n    if (resolved) {\n        resolved = path.resolve(hasCustomCwd ? parsed.options.cwd : \"\", resolved);\n    }\n    return resolved;\n}\nfunction resolveCommand(parsed) {\n    return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);\n}\nmodule.exports = resolveCommand;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL3Jlc29sdmVDb21tYW5kLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDckIsTUFBTUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDdEIsTUFBTUUsYUFBYUYsbUJBQU9BLENBQUM7QUFFM0IsU0FBU0csc0JBQXNCQyxNQUFNLEVBQUVDLGNBQWM7SUFDakQsTUFBTUMsTUFBTUYsT0FBT0csT0FBTyxDQUFDRCxHQUFHLElBQUlFLFFBQVFGLEdBQUc7SUFDN0MsTUFBTUcsTUFBTUQsUUFBUUMsR0FBRztJQUN2QixNQUFNQyxlQUFlTixPQUFPRyxPQUFPLENBQUNFLEdBQUcsSUFBSTtJQUMzQyw2Q0FBNkM7SUFDN0MsTUFBTUUsa0JBQWtCRCxnQkFBZ0JGLFFBQVFJLEtBQUssS0FBS0MsYUFBYSxDQUFDTCxRQUFRSSxLQUFLLENBQUNFLFFBQVE7SUFFOUYscUVBQXFFO0lBQ3JFLHVFQUF1RTtJQUN2RSxJQUFJSCxpQkFBaUI7UUFDakIsSUFBSTtZQUNBSCxRQUFRSSxLQUFLLENBQUNSLE9BQU9HLE9BQU8sQ0FBQ0UsR0FBRztRQUNwQyxFQUFFLE9BQU9NLEtBQUs7UUFDVixTQUFTLEdBQ2I7SUFDSjtJQUVBLElBQUlDO0lBRUosSUFBSTtRQUNBQSxXQUFXZixNQUFNZ0IsSUFBSSxDQUFDYixPQUFPYyxPQUFPLEVBQUU7WUFDbENuQixNQUFNTyxHQUFHLENBQUNKLFdBQVc7Z0JBQUVJO1lBQUksR0FBRztZQUM5QmEsU0FBU2QsaUJBQWlCTixLQUFLcUIsU0FBUyxHQUFHUDtRQUMvQztJQUNKLEVBQUUsT0FBT1EsR0FBRztJQUNSLFNBQVMsR0FDYixTQUFVO1FBQ04sSUFBSVYsaUJBQWlCO1lBQ2pCSCxRQUFRSSxLQUFLLENBQUNIO1FBQ2xCO0lBQ0o7SUFFQSx3RUFBd0U7SUFDeEUsNkZBQTZGO0lBQzdGLElBQUlPLFVBQVU7UUFDVkEsV0FBV2pCLEtBQUt1QixPQUFPLENBQUNaLGVBQWVOLE9BQU9HLE9BQU8sQ0FBQ0UsR0FBRyxHQUFHLElBQUlPO0lBQ3BFO0lBRUEsT0FBT0E7QUFDWDtBQUVBLFNBQVNPLGVBQWVuQixNQUFNO0lBQzFCLE9BQU9ELHNCQUFzQkMsV0FBV0Qsc0JBQXNCQyxRQUFRO0FBQzFFO0FBRUFvQixPQUFPQyxPQUFPLEdBQUdGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZHJpdmUtbGFicy1vcmNoZXN0cmF0b3IvLi9ub2RlX21vZHVsZXMvLnBucG0vY3Jvc3Mtc3Bhd25ANy4wLjYvbm9kZV9tb2R1bGVzL2Nyb3NzLXNwYXduL2xpYi91dGlsL3Jlc29sdmVDb21tYW5kLmpzPzEzODEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qgd2hpY2ggPSByZXF1aXJlKCd3aGljaCcpO1xuY29uc3QgZ2V0UGF0aEtleSA9IHJlcXVpcmUoJ3BhdGgta2V5Jyk7XG5cbmZ1bmN0aW9uIHJlc29sdmVDb21tYW5kQXR0ZW1wdChwYXJzZWQsIHdpdGhvdXRQYXRoRXh0KSB7XG4gICAgY29uc3QgZW52ID0gcGFyc2VkLm9wdGlvbnMuZW52IHx8IHByb2Nlc3MuZW52O1xuICAgIGNvbnN0IGN3ZCA9IHByb2Nlc3MuY3dkKCk7XG4gICAgY29uc3QgaGFzQ3VzdG9tQ3dkID0gcGFyc2VkLm9wdGlvbnMuY3dkICE9IG51bGw7XG4gICAgLy8gV29ya2VyIHRocmVhZHMgZG8gbm90IGhhdmUgcHJvY2Vzcy5jaGRpcigpXG4gICAgY29uc3Qgc2hvdWxkU3dpdGNoQ3dkID0gaGFzQ3VzdG9tQ3dkICYmIHByb2Nlc3MuY2hkaXIgIT09IHVuZGVmaW5lZCAmJiAhcHJvY2Vzcy5jaGRpci5kaXNhYmxlZDtcblxuICAgIC8vIElmIGEgY3VzdG9tIGBjd2RgIHdhcyBzcGVjaWZpZWQsIHdlIG5lZWQgdG8gY2hhbmdlIHRoZSBwcm9jZXNzIGN3ZFxuICAgIC8vIGJlY2F1c2UgYHdoaWNoYCB3aWxsIGRvIHN0YXQgY2FsbHMgYnV0IGRvZXMgbm90IHN1cHBvcnQgYSBjdXN0b20gY3dkXG4gICAgaWYgKHNob3VsZFN3aXRjaEN3ZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvY2Vzcy5jaGRpcihwYXJzZWQub3B0aW9ucy5jd2QpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIC8qIEVtcHR5ICovXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZWQ7XG5cbiAgICB0cnkge1xuICAgICAgICByZXNvbHZlZCA9IHdoaWNoLnN5bmMocGFyc2VkLmNvbW1hbmQsIHtcbiAgICAgICAgICAgIHBhdGg6IGVudltnZXRQYXRoS2V5KHsgZW52IH0pXSxcbiAgICAgICAgICAgIHBhdGhFeHQ6IHdpdGhvdXRQYXRoRXh0ID8gcGF0aC5kZWxpbWl0ZXIgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLyogRW1wdHkgKi9cbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoc2hvdWxkU3dpdGNoQ3dkKSB7XG4gICAgICAgICAgICBwcm9jZXNzLmNoZGlyKGN3ZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB3ZSBzdWNjZXNzZnVsbHkgcmVzb2x2ZWQsIGVuc3VyZSB0aGF0IGFuIGFic29sdXRlIHBhdGggaXMgcmV0dXJuZWRcbiAgICAvLyBOb3RlIHRoYXQgd2hlbiBhIGN1c3RvbSBgY3dkYCB3YXMgdXNlZCwgd2UgbmVlZCB0byByZXNvbHZlIHRvIGFuIGFic29sdXRlIHBhdGggYmFzZWQgb24gaXRcbiAgICBpZiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmVzb2x2ZWQgPSBwYXRoLnJlc29sdmUoaGFzQ3VzdG9tQ3dkID8gcGFyc2VkLm9wdGlvbnMuY3dkIDogJycsIHJlc29sdmVkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzb2x2ZWQ7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb21tYW5kKHBhcnNlZCkge1xuICAgIHJldHVybiByZXNvbHZlQ29tbWFuZEF0dGVtcHQocGFyc2VkKSB8fCByZXNvbHZlQ29tbWFuZEF0dGVtcHQocGFyc2VkLCB0cnVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXNvbHZlQ29tbWFuZDtcbiJdLCJuYW1lcyI6WyJwYXRoIiwicmVxdWlyZSIsIndoaWNoIiwiZ2V0UGF0aEtleSIsInJlc29sdmVDb21tYW5kQXR0ZW1wdCIsInBhcnNlZCIsIndpdGhvdXRQYXRoRXh0IiwiZW52Iiwib3B0aW9ucyIsInByb2Nlc3MiLCJjd2QiLCJoYXNDdXN0b21Dd2QiLCJzaG91bGRTd2l0Y2hDd2QiLCJjaGRpciIsInVuZGVmaW5lZCIsImRpc2FibGVkIiwiZXJyIiwicmVzb2x2ZWQiLCJzeW5jIiwiY29tbWFuZCIsInBhdGhFeHQiLCJkZWxpbWl0ZXIiLCJlIiwicmVzb2x2ZSIsInJlc29sdmVDb21tYW5kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/cross-spawn@7.0.6/node_modules/cross-spawn/lib/util/resolveCommand.js\n");

/***/ })

};
;