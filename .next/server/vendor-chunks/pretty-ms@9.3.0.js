"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pretty-ms@9.3.0";
exports.ids = ["vendor-chunks/pretty-ms@9.3.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/pretty-ms@9.3.0/node_modules/pretty-ms/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/.pnpm/pretty-ms@9.3.0/node_modules/pretty-ms/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ prettyMilliseconds)\n/* harmony export */ });\n/* harmony import */ var parse_ms__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! parse-ms */ \"(rsc)/./node_modules/.pnpm/parse-ms@4.0.0/node_modules/parse-ms/index.js\");\n\nconst isZero = (value)=>value === 0 || value === 0n;\nconst pluralize = (word, count)=>count === 1 || count === 1n ? word : `${word}s`;\nconst SECOND_ROUNDING_EPSILON = 0.0000001;\nconst ONE_DAY_IN_MILLISECONDS = 24n * 60n * 60n * 1000n;\nfunction prettyMilliseconds(milliseconds, options) {\n    const isBigInt = typeof milliseconds === \"bigint\";\n    if (!isBigInt && !Number.isFinite(milliseconds)) {\n        throw new TypeError(\"Expected a finite number or bigint\");\n    }\n    options = {\n        ...options\n    };\n    const sign = milliseconds < 0 ? \"-\" : \"\";\n    milliseconds = milliseconds < 0 ? -milliseconds : milliseconds; // Cannot use `Math.abs()` because of BigInt support.\n    if (options.colonNotation) {\n        options.compact = false;\n        options.formatSubMilliseconds = false;\n        options.separateMilliseconds = false;\n        options.verbose = false;\n    }\n    if (options.compact) {\n        options.unitCount = 1;\n        options.secondsDecimalDigits = 0;\n        options.millisecondsDecimalDigits = 0;\n    }\n    let result = [];\n    const floorDecimals = (value, decimalDigits)=>{\n        const flooredInterimValue = Math.floor(value * 10 ** decimalDigits + SECOND_ROUNDING_EPSILON);\n        const flooredValue = Math.round(flooredInterimValue) / 10 ** decimalDigits;\n        return flooredValue.toFixed(decimalDigits);\n    };\n    const add = (value, long, short, valueString)=>{\n        if ((result.length === 0 || !options.colonNotation) && isZero(value) && !(options.colonNotation && short === \"m\")) {\n            return;\n        }\n        valueString ??= String(value);\n        if (options.colonNotation) {\n            const wholeDigits = valueString.includes(\".\") ? valueString.split(\".\")[0].length : valueString.length;\n            const minLength = result.length > 0 ? 2 : 1;\n            valueString = \"0\".repeat(Math.max(0, minLength - wholeDigits)) + valueString;\n        } else {\n            valueString += options.verbose ? \" \" + pluralize(long, value) : short;\n        }\n        result.push(valueString);\n    };\n    const parsed = (0,parse_ms__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(milliseconds);\n    const days = BigInt(parsed.days);\n    if (options.hideYearAndDays) {\n        add(BigInt(days) * 24n + BigInt(parsed.hours), \"hour\", \"h\");\n    } else {\n        if (options.hideYear) {\n            add(days, \"day\", \"d\");\n        } else {\n            add(days / 365n, \"year\", \"y\");\n            add(days % 365n, \"day\", \"d\");\n        }\n        add(Number(parsed.hours), \"hour\", \"h\");\n    }\n    add(Number(parsed.minutes), \"minute\", \"m\");\n    if (!options.hideSeconds) {\n        if (options.separateMilliseconds || options.formatSubMilliseconds || !options.colonNotation && milliseconds < 1000 && !options.subSecondsAsDecimals) {\n            const seconds = Number(parsed.seconds);\n            const milliseconds = Number(parsed.milliseconds);\n            const microseconds = Number(parsed.microseconds);\n            const nanoseconds = Number(parsed.nanoseconds);\n            add(seconds, \"second\", \"s\");\n            if (options.formatSubMilliseconds) {\n                add(milliseconds, \"millisecond\", \"ms\");\n                add(microseconds, \"microsecond\", \"\\xb5s\");\n                add(nanoseconds, \"nanosecond\", \"ns\");\n            } else {\n                const millisecondsAndBelow = milliseconds + microseconds / 1000 + nanoseconds / 1e6;\n                const millisecondsDecimalDigits = typeof options.millisecondsDecimalDigits === \"number\" ? options.millisecondsDecimalDigits : 0;\n                const roundedMilliseconds = millisecondsAndBelow >= 1 ? Math.round(millisecondsAndBelow) : Math.ceil(millisecondsAndBelow);\n                const millisecondsString = millisecondsDecimalDigits ? millisecondsAndBelow.toFixed(millisecondsDecimalDigits) : roundedMilliseconds;\n                add(Number.parseFloat(millisecondsString), \"millisecond\", \"ms\", millisecondsString);\n            }\n        } else {\n            const seconds = (isBigInt ? Number(milliseconds % ONE_DAY_IN_MILLISECONDS) : milliseconds) / 1000 % 60;\n            const secondsDecimalDigits = typeof options.secondsDecimalDigits === \"number\" ? options.secondsDecimalDigits : 1;\n            const secondsFixed = floorDecimals(seconds, secondsDecimalDigits);\n            const secondsString = options.keepDecimalsOnWholeSeconds ? secondsFixed : secondsFixed.replace(/\\.0+$/, \"\");\n            add(Number.parseFloat(secondsString), \"second\", \"s\", secondsString);\n        }\n    }\n    if (result.length === 0) {\n        return sign + \"0\" + (options.verbose ? \" milliseconds\" : \"ms\");\n    }\n    const separator = options.colonNotation ? \":\" : \" \";\n    if (typeof options.unitCount === \"number\") {\n        result = result.slice(0, Math.max(options.unitCount, 1));\n    }\n    return sign + result.join(separator);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/pretty-ms@9.3.0/node_modules/pretty-ms/index.js\n");

/***/ })

};
;