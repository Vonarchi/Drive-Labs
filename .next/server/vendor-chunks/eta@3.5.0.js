"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eta@3.5.0";
exports.ids = ["vendor-chunks/eta@3.5.0"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/eta@3.5.0/node_modules/eta/dist/eta.module.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/.pnpm/eta@3.5.0/node_modules/eta/dist/eta.module.mjs ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Eta: () => (/* binding */ Eta),\n/* harmony export */   EtaError: () => (/* binding */ EtaError),\n/* harmony export */   EtaFileResolutionError: () => (/* binding */ EtaFileResolutionError),\n/* harmony export */   EtaNameResolutionError: () => (/* binding */ EtaNameResolutionError),\n/* harmony export */   EtaParseError: () => (/* binding */ EtaParseError),\n/* harmony export */   EtaRuntimeError: () => (/* binding */ EtaRuntimeError)\n/* harmony export */ });\n/* harmony import */ var node_path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node:path */ \"node:path\");\n/* harmony import */ var node_fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! node:fs */ \"node:fs\");\n\n\n/**\n * Handles storage and accessing of values\n *\n * In this case, we use it to store compiled template functions\n * Indexed by their `name` or `filename`\n */ class Cacher {\n    constructor(cache){\n        this.cache = void 0;\n        this.cache = cache;\n    }\n    define(key, val) {\n        this.cache[key] = val;\n    }\n    get(key) {\n        return this.cache[key];\n    }\n    remove(key) {\n        delete this.cache[key];\n    }\n    reset() {\n        this.cache = {};\n    }\n    load(cacheObj) {\n        this.cache = {\n            ...this.cache,\n            ...cacheObj\n        };\n    }\n}\nclass EtaError extends Error {\n    constructor(message){\n        super(message);\n        this.name = \"Eta Error\";\n    }\n}\nclass EtaParseError extends EtaError {\n    constructor(message){\n        super(message);\n        this.name = \"EtaParser Error\";\n    }\n}\nclass EtaRuntimeError extends EtaError {\n    constructor(message){\n        super(message);\n        this.name = \"EtaRuntime Error\";\n    }\n}\nclass EtaFileResolutionError extends EtaError {\n    constructor(message){\n        super(message);\n        this.name = \"EtaFileResolution Error\";\n    }\n}\nclass EtaNameResolutionError extends EtaError {\n    constructor(message){\n        super(message);\n        this.name = \"EtaNameResolution Error\";\n    }\n}\n/**\n * Throws an EtaError with a nicely formatted error and message showing where in the template the error occurred.\n */ function ParseErr(message, str, indx) {\n    const whitespace = str.slice(0, indx).split(/\\n/);\n    const lineNo = whitespace.length;\n    const colNo = whitespace[lineNo - 1].length + 1;\n    message += \" at line \" + lineNo + \" col \" + colNo + \":\\n\\n\" + \"  \" + str.split(/\\n/)[lineNo - 1] + \"\\n\" + \"  \" + Array(colNo).join(\" \") + \"^\";\n    throw new EtaParseError(message);\n}\nfunction RuntimeErr(originalError, str, lineNo, path) {\n    // code gratefully taken from https://github.com/mde/ejs and adapted\n    const lines = str.split(\"\\n\");\n    const start = Math.max(lineNo - 3, 0);\n    const end = Math.min(lines.length, lineNo + 3);\n    const filename = path;\n    // Error context\n    const context = lines.slice(start, end).map(function(line, i) {\n        const curr = i + start + 1;\n        return (curr == lineNo ? \" >> \" : \"    \") + curr + \"| \" + line;\n    }).join(\"\\n\");\n    const header = filename ? filename + \":\" + lineNo + \"\\n\" : \"line \" + lineNo + \"\\n\";\n    const err = new EtaRuntimeError(header + context + \"\\n\\n\" + originalError.message);\n    err.name = originalError.name; // the original name (e.g. ReferenceError) may be useful\n    throw err;\n}\n/* END TYPES */ /* istanbul ignore next */ const AsyncFunction = (async function() {}).constructor; // eslint-disable-line @typescript-eslint/no-empty-function\n/**\n * Takes a template string and returns a template function that can be called with (data, config)\n *\n * @param str - The template string\n * @param config - A custom configuration object (optional)\n */ function compile(str, options) {\n    const config = this.config;\n    /* ASYNC HANDLING */ // code gratefully taken from https://github.com/mde/ejs and adapted\n    const ctor = options && options.async ? AsyncFunction : Function;\n    /* END ASYNC HANDLING */ try {\n        return new ctor(config.varName, \"options\", this.compileToString.call(this, str, options)); // eslint-disable-line no-new-func\n    } catch (e) {\n        if (e instanceof SyntaxError) {\n            throw new EtaParseError(\"Bad template syntax\\n\\n\" + e.message + \"\\n\" + Array(e.message.length + 1).join(\"=\") + \"\\n\" + this.compileToString.call(this, str, options) + \"\\n\");\n        } else {\n            throw e;\n        }\n    }\n}\n/* TYPES */ /* END TYPES */ /**\n * Compiles a template string to a function string. Most often users just use `compile()`, which calls `compileToString` and creates a new function using the result\n */ function compileToString(str, options) {\n    const config = this.config;\n    const isAsync = options && options.async;\n    const compileBody = this.compileBody;\n    const buffer = this.parse.call(this, str);\n    // note: when the include function passes through options, the only parameter that matters is the filepath parameter\n    let res = `${config.functionHeader}\nlet include = (template, data) => this.render(template, data, options);\nlet includeAsync = (template, data) => this.renderAsync(template, data, options);\n\nlet __eta = {res: \"\", e: this.config.escapeFunction, f: this.config.filterFunction${config.debug ? ', line: 1, templateStr: \"' + str.replace(/\\\\|\"/g, \"\\\\$&\").replace(/\\r\\n|\\n|\\r/g, \"\\\\n\") + '\"' : \"\"}};\n\nfunction layout(path, data) {\n  __eta.layout = path;\n  __eta.layoutData = data;\n}${config.debug ? \"try {\" : \"\"}${config.useWith ? \"with(\" + config.varName + \"||{}){\" : \"\"}\n\n${compileBody.call(this, buffer)}\nif (__eta.layout) {\n  __eta.res = ${isAsync ? \"await includeAsync\" : \"include\"} (__eta.layout, {...${config.varName}, body: __eta.res, ...__eta.layoutData});\n}\n${config.useWith ? \"}\" : \"\"}${config.debug ? \"} catch (e) { this.RuntimeErr(e, __eta.templateStr, __eta.line, options.filepath) }\" : \"\"}\nreturn __eta.res;\n`;\n    if (config.plugins) {\n        for(let i = 0; i < config.plugins.length; i++){\n            const plugin = config.plugins[i];\n            if (plugin.processFnString) {\n                res = plugin.processFnString(res, config);\n            }\n        }\n    }\n    return res;\n}\n/**\n * Loops through the AST generated by `parse` and transform each item into JS calls\n *\n * **Example**\n *\n * ```js\n * let templateAST = ['Hi ', { val: 'it.name', t: 'i' }]\n * compileBody.call(Eta, templateAST)\n * // => \"__eta.res+='Hi '\\n__eta.res+=__eta.e(it.name)\\n\"\n * ```\n */ function compileBody(buff) {\n    const config = this.config;\n    let i = 0;\n    const buffLength = buff.length;\n    let returnStr = \"\";\n    for(i; i < buffLength; i++){\n        const currentBlock = buff[i];\n        if (typeof currentBlock === \"string\") {\n            const str = currentBlock;\n            // we know string exists\n            returnStr += \"__eta.res+='\" + str + \"'\\n\";\n        } else {\n            const type = currentBlock.t; // \"r\", \"e\", or \"i\"\n            let content = currentBlock.val || \"\";\n            if (config.debug) returnStr += \"__eta.line=\" + currentBlock.lineNo + \"\\n\";\n            if (type === \"r\") {\n                // raw\n                if (config.autoFilter) {\n                    content = \"__eta.f(\" + content + \")\";\n                }\n                returnStr += \"__eta.res+=\" + content + \"\\n\";\n            } else if (type === \"i\") {\n                // interpolate\n                if (config.autoFilter) {\n                    content = \"__eta.f(\" + content + \")\";\n                }\n                if (config.autoEscape) {\n                    content = \"__eta.e(\" + content + \")\";\n                }\n                returnStr += \"__eta.res+=\" + content + \"\\n\";\n            } else if (type === \"e\") {\n                // execute\n                returnStr += content + \"\\n\";\n            }\n        }\n    }\n    return returnStr;\n}\n/**\n * Takes a string within a template and trims it, based on the preceding tag's whitespace control and `config.autoTrim`\n */ function trimWS(str, config, wsLeft, wsRight) {\n    let leftTrim;\n    let rightTrim;\n    if (Array.isArray(config.autoTrim)) {\n        // Slightly confusing,\n        // but _}} will trim the left side of the following string\n        leftTrim = config.autoTrim[1];\n        rightTrim = config.autoTrim[0];\n    } else {\n        leftTrim = rightTrim = config.autoTrim;\n    }\n    if (wsLeft || wsLeft === false) {\n        leftTrim = wsLeft;\n    }\n    if (wsRight || wsRight === false) {\n        rightTrim = wsRight;\n    }\n    if (!rightTrim && !leftTrim) {\n        return str;\n    }\n    if (leftTrim === \"slurp\" && rightTrim === \"slurp\") {\n        return str.trim();\n    }\n    if (leftTrim === \"_\" || leftTrim === \"slurp\") {\n        // full slurp\n        str = str.trimStart();\n    } else if (leftTrim === \"-\" || leftTrim === \"nl\") {\n        // nl trim\n        str = str.replace(/^(?:\\r\\n|\\n|\\r)/, \"\");\n    }\n    if (rightTrim === \"_\" || rightTrim === \"slurp\") {\n        // full slurp\n        str = str.trimEnd();\n    } else if (rightTrim === \"-\" || rightTrim === \"nl\") {\n        // nl trim\n        str = str.replace(/(?:\\r\\n|\\n|\\r)$/, \"\");\n    }\n    return str;\n}\n/**\n * A map of special HTML characters to their XML-escaped equivalents\n */ const escMap = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n};\nfunction replaceChar(s) {\n    return escMap[s];\n}\n/**\n * XML-escapes an input value after converting it to a string\n *\n * @param str - Input value (usually a string)\n * @returns XML-escaped string\n */ function XMLEscape(str) {\n    // To deal with XSS. Based on Escape implementations of Mustache.JS and Marko, then customized.\n    const newStr = String(str);\n    if (/[&<>\"']/.test(newStr)) {\n        return newStr.replace(/[&<>\"']/g, replaceChar);\n    } else {\n        return newStr;\n    }\n}\n/* END TYPES */ /** Eta's base (global) configuration */ const defaultConfig = {\n    autoEscape: true,\n    autoFilter: false,\n    autoTrim: [\n        false,\n        \"nl\"\n    ],\n    cache: false,\n    cacheFilepaths: true,\n    debug: false,\n    escapeFunction: XMLEscape,\n    // default filter function (not used unless enables) just stringifies the input\n    filterFunction: (val)=>String(val),\n    functionHeader: \"\",\n    parse: {\n        exec: \"\",\n        interpolate: \"=\",\n        raw: \"~\"\n    },\n    plugins: [],\n    rmWhitespace: false,\n    tags: [\n        \"<%\",\n        \"%>\"\n    ],\n    useWith: false,\n    varName: \"it\",\n    defaultExtension: \".eta\"\n};\n/* END TYPES */ const templateLitReg = /`(?:\\\\[\\s\\S]|\\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})*}|(?!\\${)[^\\\\`])*`/g;\nconst singleQuoteReg = /'(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r'\\\\])*?'/g;\nconst doubleQuoteReg = /\"(?:\\\\[\\s\\w\"'\\\\`]|[^\\n\\r\"\\\\])*?\"/g;\n/** Escape special regular expression characters inside a string */ function escapeRegExp(string) {\n    // From MDN\n    return string.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n}\nfunction getLineNo(str, index) {\n    return str.slice(0, index).split(\"\\n\").length;\n}\nfunction parse(str) {\n    const config = this.config;\n    let buffer = [];\n    let trimLeftOfNextStr = false;\n    let lastIndex = 0;\n    const parseOptions = config.parse;\n    if (config.plugins) {\n        for(let i = 0; i < config.plugins.length; i++){\n            const plugin = config.plugins[i];\n            if (plugin.processTemplate) {\n                str = plugin.processTemplate(str, config);\n            }\n        }\n    }\n    /* Adding for EJS compatibility */ if (config.rmWhitespace) {\n        // Code taken directly from EJS\n        // Have to use two separate replaces here as `^` and `$` operators don't\n        // work well with `\\r` and empty lines don't work well with the `m` flag.\n        // Essentially, this replaces the whitespace at the beginning and end of\n        // each line and removes multiple newlines.\n        str = str.replace(/[\\r\\n]+/g, \"\\n\").replace(/^\\s+|\\s+$/gm, \"\");\n    }\n    /* End rmWhitespace option */ templateLitReg.lastIndex = 0;\n    singleQuoteReg.lastIndex = 0;\n    doubleQuoteReg.lastIndex = 0;\n    function pushString(strng, shouldTrimRightOfString) {\n        if (strng) {\n            // if string is truthy it must be of type 'string'\n            strng = trimWS(strng, config, trimLeftOfNextStr, // this will only be false on the first str, the next ones will be null or undefined\n            shouldTrimRightOfString);\n            if (strng) {\n                // replace \\ with \\\\, ' with \\'\n                // we're going to convert all CRLF to LF so it doesn't take more than one replace\n                strng = strng.replace(/\\\\|'/g, \"\\\\$&\").replace(/\\r\\n|\\n|\\r/g, \"\\\\n\");\n                buffer.push(strng);\n            }\n        }\n    }\n    const prefixes = [\n        parseOptions.exec,\n        parseOptions.interpolate,\n        parseOptions.raw\n    ].reduce(function(accumulator, prefix) {\n        if (accumulator && prefix) {\n            return accumulator + \"|\" + escapeRegExp(prefix);\n        } else if (prefix) {\n            // accumulator is falsy\n            return escapeRegExp(prefix);\n        } else {\n            // prefix and accumulator are both falsy\n            return accumulator;\n        }\n    }, \"\");\n    const parseOpenReg = new RegExp(escapeRegExp(config.tags[0]) + \"(-|_)?\\\\s*(\" + prefixes + \")?\\\\s*\", \"g\");\n    const parseCloseReg = new RegExp(\"'|\\\"|`|\\\\/\\\\*|(\\\\s*(-|_)?\" + escapeRegExp(config.tags[1]) + \")\", \"g\");\n    let m;\n    while(m = parseOpenReg.exec(str)){\n        const precedingString = str.slice(lastIndex, m.index);\n        lastIndex = m[0].length + m.index;\n        const wsLeft = m[1];\n        const prefix = m[2] || \"\"; // by default either ~, =, or empty\n        pushString(precedingString, wsLeft);\n        parseCloseReg.lastIndex = lastIndex;\n        let closeTag;\n        let currentObj = false;\n        while(closeTag = parseCloseReg.exec(str)){\n            if (closeTag[1]) {\n                const content = str.slice(lastIndex, closeTag.index);\n                parseOpenReg.lastIndex = lastIndex = parseCloseReg.lastIndex;\n                trimLeftOfNextStr = closeTag[2];\n                const currentType = prefix === parseOptions.exec ? \"e\" : prefix === parseOptions.raw ? \"r\" : prefix === parseOptions.interpolate ? \"i\" : \"\";\n                currentObj = {\n                    t: currentType,\n                    val: content\n                };\n                break;\n            } else {\n                const char = closeTag[0];\n                if (char === \"/*\") {\n                    const commentCloseInd = str.indexOf(\"*/\", parseCloseReg.lastIndex);\n                    if (commentCloseInd === -1) {\n                        ParseErr(\"unclosed comment\", str, closeTag.index);\n                    }\n                    parseCloseReg.lastIndex = commentCloseInd;\n                } else if (char === \"'\") {\n                    singleQuoteReg.lastIndex = closeTag.index;\n                    const singleQuoteMatch = singleQuoteReg.exec(str);\n                    if (singleQuoteMatch) {\n                        parseCloseReg.lastIndex = singleQuoteReg.lastIndex;\n                    } else {\n                        ParseErr(\"unclosed string\", str, closeTag.index);\n                    }\n                } else if (char === '\"') {\n                    doubleQuoteReg.lastIndex = closeTag.index;\n                    const doubleQuoteMatch = doubleQuoteReg.exec(str);\n                    if (doubleQuoteMatch) {\n                        parseCloseReg.lastIndex = doubleQuoteReg.lastIndex;\n                    } else {\n                        ParseErr(\"unclosed string\", str, closeTag.index);\n                    }\n                } else if (char === \"`\") {\n                    templateLitReg.lastIndex = closeTag.index;\n                    const templateLitMatch = templateLitReg.exec(str);\n                    if (templateLitMatch) {\n                        parseCloseReg.lastIndex = templateLitReg.lastIndex;\n                    } else {\n                        ParseErr(\"unclosed string\", str, closeTag.index);\n                    }\n                }\n            }\n        }\n        if (currentObj) {\n            if (config.debug) {\n                currentObj.lineNo = getLineNo(str, m.index);\n            }\n            buffer.push(currentObj);\n        } else {\n            ParseErr(\"unclosed tag\", str, m.index);\n        }\n    }\n    pushString(str.slice(lastIndex, str.length), false);\n    if (config.plugins) {\n        for(let i = 0; i < config.plugins.length; i++){\n            const plugin = config.plugins[i];\n            if (plugin.processAST) {\n                buffer = plugin.processAST(buffer, config);\n            }\n        }\n    }\n    return buffer;\n}\n/* END TYPES */ function handleCache(template, options) {\n    const templateStore = options && options.async ? this.templatesAsync : this.templatesSync;\n    if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n        const templatePath = options.filepath;\n        const cachedTemplate = templateStore.get(templatePath);\n        if (this.config.cache && cachedTemplate) {\n            return cachedTemplate;\n        } else {\n            const templateString = this.readFile(templatePath);\n            const templateFn = this.compile(templateString, options);\n            if (this.config.cache) templateStore.define(templatePath, templateFn);\n            return templateFn;\n        }\n    } else {\n        const cachedTemplate = templateStore.get(template);\n        if (cachedTemplate) {\n            return cachedTemplate;\n        } else {\n            throw new EtaNameResolutionError(\"Failed to get template '\" + template + \"'\");\n        }\n    }\n}\nfunction render(template, // template name or template function\ndata, meta) {\n    let templateFn;\n    const options = {\n        ...meta,\n        async: false\n    };\n    if (typeof template === \"string\") {\n        if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n            options.filepath = this.resolvePath(template, options);\n        }\n        templateFn = handleCache.call(this, template, options);\n    } else {\n        templateFn = template;\n    }\n    const res = templateFn.call(this, data, options);\n    return res;\n}\nfunction renderAsync(template, // template name or template function\ndata, meta) {\n    let templateFn;\n    const options = {\n        ...meta,\n        async: true\n    };\n    if (typeof template === \"string\") {\n        if (this.resolvePath && this.readFile && !template.startsWith(\"@\")) {\n            options.filepath = this.resolvePath(template, options);\n        }\n        templateFn = handleCache.call(this, template, options);\n    } else {\n        templateFn = template;\n    }\n    const res = templateFn.call(this, data, options);\n    // Return a promise\n    return Promise.resolve(res);\n}\nfunction renderString(template, data) {\n    const templateFn = this.compile(template, {\n        async: false\n    });\n    return render.call(this, templateFn, data);\n}\nfunction renderStringAsync(template, data) {\n    const templateFn = this.compile(template, {\n        async: true\n    });\n    return renderAsync.call(this, templateFn, data);\n}\n/* END TYPES */ class Eta$1 {\n    constructor(customConfig){\n        this.config = void 0;\n        this.RuntimeErr = RuntimeErr;\n        this.compile = compile;\n        this.compileToString = compileToString;\n        this.compileBody = compileBody;\n        this.parse = parse;\n        this.render = render;\n        this.renderAsync = renderAsync;\n        this.renderString = renderString;\n        this.renderStringAsync = renderStringAsync;\n        this.filepathCache = {};\n        this.templatesSync = new Cacher({});\n        this.templatesAsync = new Cacher({});\n        // resolvePath takes a relative path from the \"views\" directory\n        this.resolvePath = null;\n        this.readFile = null;\n        if (customConfig) {\n            this.config = {\n                ...defaultConfig,\n                ...customConfig\n            };\n        } else {\n            this.config = {\n                ...defaultConfig\n            };\n        }\n    }\n    // METHODS\n    configure(customConfig) {\n        this.config = {\n            ...this.config,\n            ...customConfig\n        };\n    }\n    withConfig(customConfig) {\n        return {\n            ...this,\n            config: {\n                ...this.config,\n                ...customConfig\n            }\n        };\n    }\n    loadTemplate(name, template, // template string or template function\n    options) {\n        if (typeof template === \"string\") {\n            const templates = options && options.async ? this.templatesAsync : this.templatesSync;\n            templates.define(name, this.compile(template, options));\n        } else {\n            let templates = this.templatesSync;\n            if (template.constructor.name === \"AsyncFunction\" || options && options.async) {\n                templates = this.templatesAsync;\n            }\n            templates.define(name, template);\n        }\n    }\n}\n/* END TYPES */ function readFile(path) {\n    let res = \"\";\n    try {\n        res = node_fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(path, \"utf8\");\n    // eslint-disable-line @typescript-eslint/no-explicit-any\n    } catch (err) {\n        if ((err == null ? void 0 : err.code) === \"ENOENT\") {\n            throw new EtaFileResolutionError(`Could not find template: ${path}`);\n        } else {\n            throw err;\n        }\n    }\n    return res;\n}\nfunction resolvePath(templatePath, options) {\n    let resolvedFilePath = \"\";\n    const views = this.config.views;\n    if (!views) {\n        throw new EtaFileResolutionError(\"Views directory is not defined\");\n    }\n    const baseFilePath = options && options.filepath;\n    const defaultExtension = this.config.defaultExtension === undefined ? \".eta\" : this.config.defaultExtension;\n    // how we index cached template paths\n    const cacheIndex = JSON.stringify({\n        filename: baseFilePath,\n        path: templatePath,\n        views: this.config.views\n    });\n    templatePath += node_path__WEBPACK_IMPORTED_MODULE_0__.extname(templatePath) ? \"\" : defaultExtension;\n    // if the file was included from another template\n    if (baseFilePath) {\n        // check the cache\n        if (this.config.cacheFilepaths && this.filepathCache[cacheIndex]) {\n            return this.filepathCache[cacheIndex];\n        }\n        const absolutePathTest = absolutePathRegExp.exec(templatePath);\n        if (absolutePathTest && absolutePathTest.length) {\n            const formattedPath = templatePath.replace(/^\\/*|^\\\\*/, \"\");\n            resolvedFilePath = node_path__WEBPACK_IMPORTED_MODULE_0__.join(views, formattedPath);\n        } else {\n            resolvedFilePath = node_path__WEBPACK_IMPORTED_MODULE_0__.join(node_path__WEBPACK_IMPORTED_MODULE_0__.dirname(baseFilePath), templatePath);\n        }\n    } else {\n        resolvedFilePath = node_path__WEBPACK_IMPORTED_MODULE_0__.join(views, templatePath);\n    }\n    if (dirIsChild(views, resolvedFilePath)) {\n        // add resolved path to the cache\n        if (baseFilePath && this.config.cacheFilepaths) {\n            this.filepathCache[cacheIndex] = resolvedFilePath;\n        }\n        return resolvedFilePath;\n    } else {\n        throw new EtaFileResolutionError(`Template '${templatePath}' is not in the views directory`);\n    }\n}\nfunction dirIsChild(parent, dir) {\n    const relative = node_path__WEBPACK_IMPORTED_MODULE_0__.relative(parent, dir);\n    return relative && !relative.startsWith(\"..\") && !node_path__WEBPACK_IMPORTED_MODULE_0__.isAbsolute(relative);\n}\nconst absolutePathRegExp = /^\\\\|^\\//;\nclass Eta extends Eta$1 {\n    constructor(...args){\n        super(...args);\n        this.readFile = readFile;\n        this.resolvePath = resolvePath;\n    }\n}\n //# sourceMappingURL=eta.module.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/eta@3.5.0/node_modules/eta/dist/eta.module.mjs\n");

/***/ })

};
;