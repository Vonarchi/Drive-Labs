name: PR Security Check
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security_validation:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          # Only fetch the PR head, not the entire history
          fetch-depth: 1
          
      - name: Check if PR is from fork
        id: fork-check
        run: |
          if [ "${{ github.event.pull_request.head.repo.fork }}" == "true" ]; then
            echo "is-fork=true" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Fork PR detected - limiting access to secrets"
          else
            echo "is-fork=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Internal PR - full access available"
          fi
          
      - name: Skip steps requiring secrets on forks
        if: ${{ github.event.pull_request.head.repo.fork == true }}
        run: |
          echo "üîí Fork PR detected: skipping secret-dependent steps."
          echo "This is a security measure to prevent secret exposure."
          echo "Only maintainers can run full CI/CD pipelines."
          
      - name: Basic code validation
        run: |
          echo "Running basic code validation..."
          # Check for common security issues
          if grep -r "password\|secret\|key\|token" --include="*.ts" --include="*.js" --include="*.json" src/ | grep -v "process.env"; then
            echo "‚ùå Potential hardcoded secrets found"
            exit 1
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          
      - name: Validate file permissions
        run: |
          echo "Checking file permissions..."
          # Ensure no sensitive files are world-readable
          find . -name "*.env*" -o -name "*.key" -o -name "*.pem" | while read file; do
            if [ -f "$file" ]; then
              perms=$(stat -c "%a" "$file")
              if [ "$perms" != "600" ] && [ "$perms" != "640" ]; then
                echo "‚ö†Ô∏è  Warning: $file has permissions $perms (should be 600 or 640)"
              fi
            fi
          done
          
      - name: Check for large files
        run: |
          echo "Checking for large files..."
          find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
            echo "‚ö†Ô∏è  Large file detected: $file"
          done
          
      - name: Validate commit messages
        run: |
          echo "Validating commit messages..."
          # Check if commit messages contain sensitive information
          git log --oneline -10 | while read commit; do
            if echo "$commit" | grep -i "password\|secret\|key\|token\|api"; then
              echo "‚ö†Ô∏è  Warning: Commit message may contain sensitive info: $commit"
            fi
          done

  dependency_audit:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Enable Corepack
        run: corepack enable
        
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Security audit
        run: |
          echo "Running security audit..."
          pnpm audit --audit-level moderate || {
            echo "‚ùå Security vulnerabilities found"
            echo "Please run 'pnpm audit fix' to resolve issues"
            exit 1
          }
          echo "‚úÖ No security vulnerabilities found"
          
      - name: Check for outdated packages
        run: |
          echo "Checking for outdated packages..."
          pnpm outdated || echo "Some packages may be outdated - consider updating"

  documentation_check:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for required documentation
        run: |
          echo "Checking documentation completeness..."
          
          # Check if README exists and has content
          if [ ! -f "README.md" ] || [ ! -s "README.md" ]; then
            echo "‚ùå README.md is missing or empty"
            exit 1
          fi
          
          # Check if .env.example exists
          if [ ! -f ".env.example" ]; then
            echo "‚ö†Ô∏è  .env.example is missing - consider adding one"
          fi
          
          # Check if security documentation exists
          if [ ! -d "docs/security" ]; then
            echo "‚ö†Ô∏è  Security documentation directory missing"
          fi
          
          echo "‚úÖ Basic documentation checks passed"
